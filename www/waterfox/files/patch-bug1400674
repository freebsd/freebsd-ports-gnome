commit c08bea16ab67 (HEAD)
Author: JW Wang <jwwang@mozilla.com>
Date:   Fri Oct 13 17:24:24 2017 +0800

    Bug 1400674 - Fix the algorithm of filling audio gaps with silence. r=jya, a=ritu
    
    MozReview-Commit-ID: Hjsboq6PdlN
    
    --HG--
    extra : source : aecaa85bb1d9d8b7d2cbd9ab84eb6dbc0ed9eee8
---
 dom/media/mediasink/AudioSink.cpp | 37 +++++++++++++++----------------------
 1 file changed, 15 insertions(+), 22 deletions(-)

diff --git dom/media/mediasink/AudioSink.cpp dom/media/mediasink/AudioSink.cpp
index 0dbb53a3387a..81be7ac0bd89 100644
--- dom/media/mediasink/AudioSink.cpp
+++ dom/media/mediasink/AudioSink.cpp
@@ -426,28 +426,21 @@ AudioSink::NotifyAudioNeeded()
       missingFrames = std::min<int64_t>(INT32_MAX, missingFrames.value());
       mFramesParsed += missingFrames.value();
 
-      // We need to calculate how many frames are missing at the output rate.
-      missingFrames =
-        SaferMultDiv(missingFrames.value(), mOutputRate, data->mRate);
-      if (!missingFrames.isValid()) {
-        NS_WARNING("Int overflow in AudioSink");
-        mErrored = true;
-        return;
-      }
-
-      // We need to insert silence, first use drained frames if any.
-      missingFrames -= DrainConverter(missingFrames.value());
-      // Insert silence if still needed.
-      if (missingFrames.value()) {
-        AlignedAudioBuffer silenceData(missingFrames.value() * mOutputChannels);
-        if (!silenceData) {
-          NS_WARNING("OOM in AudioSink");
-          mErrored = true;
-          return;
-        }
-        RefPtr<AudioData> silence = CreateAudioFromBuffer(Move(silenceData), data);
-        PushProcessedAudio(silence);
+      RefPtr<AudioData> silenceData;
+      AlignedAudioBuffer silenceBuffer(missingFrames.value() * data->mChannels);
+       if (!silenceBuffer) {
+         NS_WARNING("OOM in AudioSink");
+         mErrored = true;
+         return;
+       }
+      if (mConverter->InputConfig() != mConverter->OutputConfig()) {
+        AlignedAudioBuffer convertedData =
+          mConverter->Process(AudioSampleBuffer(Move(silenceBuffer))).Forget();
+        silenceData = CreateAudioFromBuffer(Move(convertedData), data);
+      } else {
+        silenceData = CreateAudioFromBuffer(Move(silenceBuffer), data);
       }
+      PushProcessedAudio(silenceData);
     }
 
     mLastEndTime = data->GetEndTime();
@@ -488,7 +481,7 @@ AudioSink::PushProcessedAudio(AudioData* aData)
 
 already_AddRefed<AudioData>
 AudioSink::CreateAudioFromBuffer(AlignedAudioBuffer&& aBuffer,
-                                            AudioData* aReference)
+                                 AudioData* aReference)
 {
   uint32_t frames = aBuffer.Length() / mOutputChannels;
   if (!frames) {
