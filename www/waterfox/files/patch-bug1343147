commit e215b167b9b9
Author: cku <cku@mozilla.com>
Date:   Tue Oct 3 11:29:19 2017 +0800

    Bug 1343147 - Do not double applying transform vector of the root frame in a glyph mask into the target context. r=mstange, a=ritu
    
    When we generate the glyph mask for a transformed frame in
    GenerateAndPushTextMask, the transform vector had been applied into aContext[1],
    so we should find a way to prevent applying the vector again when painting the
    glyph mask.
    
    In bug 1299715, I tried to prevent double apply at [2], it caused two problems:
    1. We only skip generating nsDisplayTransform, but we may still create a
    nsDisplayPerspactive bellow. Since the parent of a nsDisplayPerspective must be
    a nsDisplayTransform, which have been ignored, so we hit this assertion.
    2. We skip all transform for all frames while painting the glyph mask, which is
    not correct. We should only skip double applying transform vector of the root
    frame.
    
    This patch fixes both of these issues:
    a. We will still create a nsDisplayTransform for the root frame if need. But
    the transform matrix we apply into the target context will be an identity
    matrix, so we fix #1 above.
    b. In #a, we change the transform matrix to an identity matrix only for the root
    frame of the  glyph mask, so we fix #2.
    
    [1]
    https://hg.mozilla.org/mozilla-central/file/59e5ec5729db/layout/painting/nsDisplayList.cpp#l752
    [2]
    https://hg.mozilla.org/mozilla-central/file/ce2c129f0a87/layout/generic/nsFrame.cpp#l2806
    
    MozReview-Commit-ID: 973lkQQxLB6
    
    --HG--
    extra : source : 84451d723686bc47b81c44ed2ddf6c61f3e35915
---
 layout/generic/nsFrame.cpp        | 13 +++++--------
 layout/painting/nsDisplayList.cpp |  9 ++++++++-
 2 files changed, 13 insertions(+), 9 deletions(-)

diff --git layout/generic/nsFrame.cpp layout/generic/nsFrame.cpp
index 37f2e2801220..dbfd61b7e142 100644
--- layout/generic/nsFrame.cpp
+++ layout/generic/nsFrame.cpp
@@ -2803,14 +2803,11 @@ nsIFrame::BuildDisplayListForStackingContext(nsDisplayListBuilder* aBuilder,
     buildingDisplayList.SetReferenceFrameAndCurrentOffset(outerReferenceFrame,
       GetOffsetToCrossDoc(outerReferenceFrame));
 
-    if (!aBuilder->IsForGenerateGlyphMask() &&
-        !aBuilder->IsForPaintingSelectionBG()) {
-      nsDisplayTransform *transformItem =
-        new (aBuilder) nsDisplayTransform(aBuilder, this,
-                                          &resultList, dirtyRect, 0,
-                                          allowAsyncAnimation);
-      resultList.AppendNewToTop(transformItem);
-    }
+    nsDisplayTransform *transformItem =
+      new (aBuilder) nsDisplayTransform(aBuilder, this,
+                                        &resultList, dirtyRect, 0,
+                                        allowAsyncAnimation);
+    resultList.AppendNewToTop(transformItem);
 
     if (hasPerspective) {
       if (clipCapturedBy == ContainerItemType::ePerspective) {
diff --git layout/painting/nsDisplayList.cpp layout/painting/nsDisplayList.cpp
index 801e1ea2fb4d..6477bda52f01 100644
--- layout/painting/nsDisplayList.cpp
+++ layout/painting/nsDisplayList.cpp
@@ -7976,11 +7976,18 @@ already_AddRefed<Layer> nsDisplayTransform::BuildLayer(nsDisplayListBuilder *aBu
                                                        LayerManager *aManager,
                                                        const ContainerLayerParameters& aContainerParameters)
 {
+  // While generating a glyph mask, the transform vector of the root frame had
+  // been applied into the target context, so stop applying it again here.
+  const bool shouldSkipTransform =
+    (aBuilder->RootReferenceFrame() == mFrame) &&
+    (aBuilder->IsForGenerateGlyphMask() || aBuilder->IsForPaintingSelectionBG());
+
   /* For frames without transform, it would not be removed for
    * backface hidden here.  But, it would be removed by the init
    * function of nsDisplayTransform.
    */
-  const Matrix4x4& newTransformMatrix = GetTransformForRendering();
+  const Matrix4x4 newTransformMatrix =
+    shouldSkipTransform ? Matrix4x4(): GetTransformForRendering();
 
   uint32_t flags = FrameLayerBuilder::CONTAINER_ALLOW_PULL_BACKGROUND_COLOR;
   RefPtr<ContainerLayer> container = aManager->GetLayerBuilder()->
diff --git dom/svg/crashtests/1343147.svg dom/svg/crashtests/1343147.svg
new file mode 100644
index 000000000000..d9c2611ca822
--- /dev/null
+++ dom/svg/crashtests/1343147.svg
@@ -0,0 +1,13 @@
+<svg xmlns="http://www.w3.org/2000/svg">
+<style>
+<![CDATA[
+  svg {
+    background-image: linear-gradient(lime, lime);
+    background-clip: text;
+  }
+  text { transform: skewy(30grad); }
+  g { perspective: 0; }
+]]>
+</style>
+  <g><text>hello</text></g>
+</svg>
diff --git dom/svg/crashtests/crashtests.list dom/svg/crashtests/crashtests.list
index 1727a206ec4f..57ab320161e2 100644
--- dom/svg/crashtests/crashtests.list
+++ dom/svg/crashtests/crashtests.list
@@ -90,4 +90,5 @@ load 1329849-5.svg
 load 1329849-6.svg
 load 1329093-1.html
 load 1329093-2.html
+load 1343147.svg
 load 1402798.html
