commit bc3e9c9c8230
Author: Andrew Osmond <aosmond@mozilla.com>
Date:   Mon Oct 30 06:58:04 2017 -0400

    Bug 1405364 - ImageBridgeParent::GetInstance should not mutate sImageBridges for lookups. r=sotaro a=sylvestre
    
    --HG--
    extra : amend_source : 6121399940a53f45027923e0e3f5a517722036ed
    extra : transplant_source : %D1%06%8F%0D%25%B3%FD%82%3D%C9%0A%5C%9B%C7%3B%15%9C%A7%EC%91
---
 gfx/layers/ipc/ImageBridgeParent.cpp | 18 ++++++++++++------
 gfx/layers/ipc/ImageBridgeParent.h   |  5 +++--
 2 files changed, 15 insertions(+), 8 deletions(-)

diff --git gfx/layers/ipc/ImageBridgeParent.cpp gfx/layers/ipc/ImageBridgeParent.cpp
index 745576a3a7b3..8f8f60ffcd78 100644
--- gfx/layers/ipc/ImageBridgeParent.cpp
+++ gfx/layers/ipc/ImageBridgeParent.cpp
@@ -42,7 +42,7 @@ using namespace mozilla::ipc;
 using namespace mozilla::gfx;
 using namespace mozilla::media;
 
-std::map<base::ProcessId, ImageBridgeParent*> ImageBridgeParent::sImageBridges;
+ImageBridgeParent::ImageBridgeMap ImageBridgeParent::sImageBridges;
 
 StaticAutoPtr<mozilla::Monitor> sImageBridgesLock;
 
@@ -366,8 +366,9 @@ ImageBridgeParent::NotifyImageComposites(nsTArray<ImageCompositeNotificationInfo
       notifications.AppendElement(aNotifications[end].mNotification);
       ++end;
     }
-    GetInstance(pid)->SendPendingAsyncMessages();
-    if (!GetInstance(pid)->SendDidComposite(notifications)) {
+    RefPtr<ImageBridgeParent> bridge = GetInstance(pid);
+    bridge->SendPendingAsyncMessages();
+    if (!bridge->SendDidComposite(notifications)) {
       ok = false;
     }
     i = end;
@@ -382,13 +383,18 @@ ImageBridgeParent::DeferredDestroy()
   mSelfRef = nullptr; // "this" ImageBridge may get deleted here.
 }
 
-RefPtr<ImageBridgeParent>
+already_AddRefed<ImageBridgeParent>
 ImageBridgeParent::GetInstance(ProcessId aId)
 {
   MOZ_ASSERT(CompositorThreadHolder::IsInCompositorThread());
   MonitorAutoLock lock(*sImageBridgesLock);
-  NS_ASSERTION(sImageBridges.count(aId) == 1, "ImageBridgeParent for the process");
-  return sImageBridges[aId];
+  ImageBridgeMap::const_iterator i = sImageBridges.find(aId);
+  if (i == sImageBridges.end()) {
+    NS_ASSERTION(false, "Cannot find image bridge for process!");
+    return nullptr;
+  }
+  RefPtr<ImageBridgeParent> bridge = i->second;
+  return bridge.forget();
 }
 
 bool
diff --git gfx/layers/ipc/ImageBridgeParent.h gfx/layers/ipc/ImageBridgeParent.h
index 7475b67e356d..3edd1f8861ee 100644
--- gfx/layers/ipc/ImageBridgeParent.h
+++ gfx/layers/ipc/ImageBridgeParent.h
@@ -114,7 +114,7 @@ public:
 
   virtual bool IsSameProcess() const override;
 
-  static RefPtr<ImageBridgeParent> GetInstance(ProcessId aId);
+  static already_AddRefed<ImageBridgeParent> GetInstance(ProcessId aId);
 
   static bool NotifyImageComposites(nsTArray<ImageCompositeNotificationInfo>& aNotifications);
 
@@ -140,7 +140,8 @@ private:
   /**
    * Map of all living ImageBridgeParent instances
    */
-  static std::map<base::ProcessId, ImageBridgeParent*> sImageBridges;
+  typedef std::map<base::ProcessId, ImageBridgeParent*> ImageBridgeMap;
+  static ImageBridgeMap sImageBridges;
 
   RefPtr<CompositorThreadHolder> mCompositorThreadHolder;
 };
