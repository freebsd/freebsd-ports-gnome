commit bec0ae08b1a9
Author: Luca Greco <lgreco@mozilla.com>
Date:   Wed Sep 27 14:24:54 2017 +0200

    Bug 1403349 - Fix wrong sourceTabId on webNavigation.onCreatedTarget event. r=aswan, a=ritu
    
    This changes fixes the regression introduced by Bug 1355120 and adds a new
    test case which contains a browserAction popup which open and immediately
    close a new window and ensure that the received onCreatedNavigationTarget
    is the expected one.
    
    MozReview-Commit-ID: JIcVCpBTpxj
    
    --HG--
    extra : source : 435db72f9b6ab5ec9144bbf92611c5c877342410
    extra : histedit_source : 99ba482dfa4bacfbd3b96d4044fdab536c1955e5
---
 ...gation_onCreatedNavigationTarget_window_open.js | 76 ++++++++++++++++++++--
 toolkit/modules/addons/WebNavigation.jsm           | 23 ++++---
 toolkit/modules/addons/WebNavigationContent.js     | 16 ++++-
 3 files changed, 99 insertions(+), 16 deletions(-)

diff --git browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
index 1dd79b4256f7..993d7c50ff43 100644
--- browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
+++ browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
@@ -58,7 +58,7 @@ async function runTestCase({extension, openNavTarget, expectedWebNavProps}) {
   is(completedNavMsg.url, url, "Got the expected webNavigation.onCompleted url property");
 }
 
-add_task(async function test_on_created_navigation_target_from_window_open() {
+add_task(async function test_window_open() {
   const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
 
   gBrowser.selectedTab = tab1;
@@ -74,7 +74,7 @@ add_task(async function test_on_created_navigation_target_from_window_open() {
 
   const expectedSourceTab = await extension.awaitMessage("expectedSourceTab");
 
-  info("open an url in a new tab from a window.open call");
+  info("open a url in a new tab from a window.open call");
 
   await runTestCase({
     extension,
@@ -91,7 +91,7 @@ add_task(async function test_on_created_navigation_target_from_window_open() {
     },
   });
 
-  info("open an url in a new window from a window.open call");
+  info("open a url in a new window from a window.open call");
 
   await runTestCase({
     extension,
@@ -113,7 +113,7 @@ add_task(async function test_on_created_navigation_target_from_window_open() {
   await extension.unload();
 });
 
-add_task(async function test_on_created_navigation_target_from_window_open_subframe() {
+add_task(async function test_window_open_from_subframe() {
   const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
 
   gBrowser.selectedTab = tab1;
@@ -129,7 +129,7 @@ add_task(async function test_on_created_navigation_target_from_window_open_subfr
 
   const expectedSourceTab = await extension.awaitMessage("expectedSourceTab");
 
-  info("open an url in a new tab from subframe window.open call");
+  info("open a url in a new tab from subframe window.open call");
 
   await runTestCase({
     extension,
@@ -146,7 +146,7 @@ add_task(async function test_on_created_navigation_target_from_window_open_subfr
     },
   });
 
-  info("open an url in a new window from subframe window.open call");
+  info("open a url in a new window from subframe window.open call");
 
   await runTestCase({
     extension,
@@ -167,3 +167,67 @@ add_task(async function test_on_created_navigation_target_from_window_open_subfr
 
   await extension.unload();
 });
+
+add_task(async function test_window_open_close_from_browserAction_popup() {
+  const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
+
+  gBrowser.selectedTab = tab1;
+
+  function popup() {
+    window.open("", "_self").close();
+
+    browser.test.sendMessage("browserAction_popup_executed");
+  }
+
+  const extension = ExtensionTestUtils.loadExtension({
+    background,
+    manifest: {
+      browser_action: {
+        default_popup: "popup.html",
+      },
+      permissions: ["webNavigation", "tabs", "<all_urls>"],
+    },
+    files: {
+      "popup.html": `<!DOCTYPE html>
+        <html>
+          <head>
+            <meta charset="utf-8">
+          </head>
+          <body>
+            <script src="popup.js"></script>
+          </body>
+        </html>
+      `,
+      "popup.js": popup,
+    },
+  });
+
+  await extension.startup();
+
+  const expectedSourceTab = await extension.awaitMessage("expectedSourceTab");
+
+  clickBrowserAction(extension);
+
+  await extension.awaitMessage("browserAction_popup_executed");
+
+  info("open a url in a new tab from a window.open call");
+
+  await runTestCase({
+    extension,
+    openNavTarget() {
+      extension.sendMessage({
+        type: "execute-contentscript",
+        code: `window.open("${OPENED_PAGE}#new-tab-from-window-open"); true;`,
+      });
+    },
+    expectedWebNavProps: {
+      sourceTabId: expectedSourceTab.sourceTabId,
+      sourceFrameId: 0,
+      url: `${OPENED_PAGE}#new-tab-from-window-open`,
+    },
+  });
+
+  await BrowserTestUtils.removeTab(tab1);
+
+  await extension.unload();
+});
diff --git toolkit/modules/addons/WebNavigation.jsm toolkit/modules/addons/WebNavigation.jsm
index 1aadbd579e05..a0c774665d17 100644
--- toolkit/modules/addons/WebNavigation.jsm
+++ toolkit/modules/addons/WebNavigation.jsm
@@ -306,19 +306,26 @@ var Manager = {
   },
 
   onCreatedNavigationTarget(browser, data) {
-    const {isSourceTab, createdWindowId, sourceFrameId, url} = data;
-
-    // We are going to potentially received two message manager messages for a single
-    // onCreatedNavigationTarget event that is happening in the child process,
-    // we are going to use the generate uuid to pair them together.
-    const pairedMessage = this.createdNavigationTargetByOuterWindowId.get(createdWindowId);
+    const {
+      createdOuterWindowId,
+      isSourceTab,
+      sourceFrameId,
+      url,
+    } = data;
+
+    // We are going to receive two message manager messages for a single
+    // onCreatedNavigationTarget event related to a window.open that is happening
+    // in the child process (one from the source tab and one from the created tab),
+    // the unique createdWindowId (the outerWindowID of the created docShell)
+    // to pair them together.
+    const pairedMessage = this.createdNavigationTargetByOuterWindowId.get(createdOuterWindowId);
 
     if (!pairedMessage) {
-      this.createdNavigationTargetByOuterWindowId.set(createdWindowId, {browser, data});
+      this.createdNavigationTargetByOuterWindowId.set(createdOuterWindowId, {browser, data});
       return;
     }
 
-    this.createdNavigationTargetByOuterWindowId.delete(createdWindowId);
+    this.createdNavigationTargetByOuterWindowId.delete(createdOuterWindowId);
 
     let sourceTabBrowser;
     let createdTabBrowser;
diff --git toolkit/modules/addons/WebNavigationContent.js toolkit/modules/addons/WebNavigationContent.js
index 31a8b7328fc9..ed873cc98644 100644
--- toolkit/modules/addons/WebNavigationContent.js
+++ toolkit/modules/addons/WebNavigationContent.js
@@ -10,6 +10,17 @@ Components.utils.import("resource://gre/modules/Services.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "WebNavigationFrames",
                                   "resource://gre/modules/WebNavigationFrames.jsm");
 
+function getDocShellOuterWindowId(docShell) {
+  if (!docShell) {
+    return undefined;
+  }
+
+  return docShell.QueryInterface(Ci.nsIInterfaceRequestor)
+                 .getInterface(Ci.nsIDOMWindow)
+                 .getInterface(Ci.nsIDOMWindowUtils)
+                 .outerWindowID;
+}
+
 function loadListener(event) {
   let document = event.target;
   let window = document.defaultView;
@@ -56,8 +67,9 @@ var CreatedNavigationTargetListener = {
     }
 
     const isSourceTab = docShell === sourceDocShell || isSourceTabDescendant;
+
     const sourceFrameId = WebNavigationFrames.getDocShellFrameId(sourceDocShell);
-    const createdWindowId = WebNavigationFrames.getDocShellFrameId(createdDocShell);
+    const createdOuterWindowId = getDocShellOuterWindowId(sourceDocShell);
 
     let url;
     if (props.hasKey("url")) {
@@ -67,7 +79,7 @@ var CreatedNavigationTargetListener = {
     sendAsyncMessage("Extension:CreatedNavigationTarget", {
       url,
       sourceFrameId,
-      createdWindowId,
+      createdOuterWindowId,
       isSourceTab,
     });
   },

commit 27a18112bd4c
Author: Luca Greco <lgreco@mozilla.com>
Date:   Wed Sep 27 19:07:41 2017 +0200

    Bug 1403349 - Prevent WebNavigation jsm to leak the sourceTab browser on unpaired CreatedNavigationTarget messages. r=aswan, a=ritu
    
    This applies the following changes:
    
    - store a weak reference to the browser element in the WebNavigation.jsm Manager's map
      of pending CreatedNavigationTarget messages
    
    - when a CreatedNavigationTarget message is received from a sourceTab
      for a created window that is not currently tracked in the map
      (e.g. it has been immediately closed), the message received from the sourceTab
      is not saved in the map of the pending CreatedNavigationTarget (and a message
      is logged in the console to make easier to investigate issues related to discarded
      CreatedNavigationTarget events).
    
    - adds an additional assertion to the related test case to ensure that no CreatedNavigationTarget
      message is still pending in the WebNavigation/jsm's Manager.
    
    MozReview-Commit-ID: FijQ8IqiY8L
    
    --HG--
    extra : source : 6692df0c568732b5f38bc594e7e020b3ea2e0f41
    extra : histedit_source : cd9bd61c19bf32bdd24f0faed101a0da9faf5ed4
---
 ...gation_onCreatedNavigationTarget_window_open.js | 16 +++++++
 toolkit/modules/addons/WebNavigation.jsm           | 50 ++++++++++++++++++----
 2 files changed, 57 insertions(+), 9 deletions(-)

diff --git browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
index 993d7c50ff43..1fbb3c07d4a9 100644
--- browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
+++ browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
@@ -58,6 +58,16 @@ async function runTestCase({extension, openNavTarget, expectedWebNavProps}) {
   is(completedNavMsg.url, url, "Got the expected webNavigation.onCompleted url property");
 }
 
+// Test that there are no pending createdNavigationTarget messages still tracked
+// in WebNavigation.jsm (to be called before the extension is unloaded, because
+// once the last extension which have subscribed a webNavigation event is unloaded
+// all the pending created navigation target data is completely cleared).
+function assertNoPendingCreatedNavigationTargetData() {
+  const {Manager} = Cu.import("resource://gre/modules/WebNavigation.jsm", {});
+  Assert.equal(Manager.createdNavigationTargetByOuterWindowId.size, 0,
+               "There should be no pending createdNavigationTarget messages in WebNavigation");
+}
+
 add_task(async function test_window_open() {
   const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
 
@@ -108,6 +118,8 @@ add_task(async function test_window_open() {
     },
   });
 
+  assertNoPendingCreatedNavigationTargetData();
+
   await BrowserTestUtils.removeTab(tab1);
 
   await extension.unload();
@@ -163,6 +175,8 @@ add_task(async function test_window_open_from_subframe() {
     },
   });
 
+  assertNoPendingCreatedNavigationTargetData();
+
   await BrowserTestUtils.removeTab(tab1);
 
   await extension.unload();
@@ -227,6 +241,8 @@ add_task(async function test_window_open_close_from_browserAction_popup() {
     },
   });
 
+  assertNoPendingCreatedNavigationTargetData();
+
   await BrowserTestUtils.removeTab(tab1);
 
   await extension.unload();
diff --git toolkit/modules/addons/WebNavigation.jsm toolkit/modules/addons/WebNavigation.jsm
index a0c774665d17..db6efdb443de 100644
--- toolkit/modules/addons/WebNavigation.jsm
+++ toolkit/modules/addons/WebNavigation.jsm
@@ -320,22 +320,54 @@ var Manager = {
     // to pair them together.
     const pairedMessage = this.createdNavigationTargetByOuterWindowId.get(createdOuterWindowId);
 
+    if (!isSourceTab) {
+      if (pairedMessage) {
+        // This should not happen, print a warning before overwriting the unexpected pending data.
+        Services.console.logStringMessage(
+          `Discarding onCreatedNavigationTarget for ${createdOuterWindowId}: ` +
+          "unexpected pending data while receiving the created tab data"
+        );
+      }
+
+      // Store a weak reference to the browser XUL element, so that we don't prevent
+      // it to be garbage collected if it has been destroyed.
+      const browserWeakRef = Cu.getWeakReference(browser);
+
+      this.createdNavigationTargetByOuterWindowId.set(createdOuterWindowId, {
+        browserWeakRef,
+        data,
+      });
+
+      return;
+    }
+
     if (!pairedMessage) {
-      this.createdNavigationTargetByOuterWindowId.set(createdOuterWindowId, {browser, data});
+      // The sourceTab should always be received after the message coming from the created
+      // top level frame because the "webNavigation-createdNavigationTarget-from-js" observers
+      // subscribed by WebNavigationContent.js are going to be executed in reverse order
+      // (See http://searchfox.org/mozilla-central/rev/f54c1723be/xpcom/ds/nsObserverList.cpp#76)
+      // and the observer subscribed to the created target will be the last one subscribed
+      // to the ObserverService (and the first one to be triggered).
+      Services.console.logStringMessage(
+        `Discarding onCreatedNavigationTarget for ${createdOuterWindowId}: ` +
+        "received source tab data without any created tab data available"
+      );
+
       return;
     }
 
     this.createdNavigationTargetByOuterWindowId.delete(createdOuterWindowId);
 
-    let sourceTabBrowser;
-    let createdTabBrowser;
+    let sourceTabBrowser = browser;
+    let createdTabBrowser = pairedMessage.browserWeakRef.get();
 
-    if (isSourceTab) {
-      sourceTabBrowser = browser;
-      createdTabBrowser = pairedMessage.browser;
-    } else {
-      sourceTabBrowser = pairedMessage.browser;
-      createdTabBrowser = browser;
+    if (!createdTabBrowser) {
+      Services.console.logStringMessage(
+        `Discarding onCreatedNavigationTarget for ${createdOuterWindowId}: ` +
+        "the created tab has been already destroyed"
+      );
+
+      return;
     }
 
     this.fire("onCreatedNavigationTarget", createdTabBrowser, {}, {

commit 9f0305064bbe
Author: Luca Greco <lgreco@mozilla.com>
Date:   Thu Sep 28 22:04:14 2017 +0200

    Bug 1403349 - Add a new webNavigation test for window.open called with a named window target. r=aswan, a=ritu
    
    MozReview-Commit-ID: Aj8uMtcGwJx
    
    --HG--
    extra : source : acc39e04d4f0559b796916d5f54a36673708766a
    extra : histedit_source : 2366c25a25acf76333f6b9386886ca5c866dad54
---
 ...gation_onCreatedNavigationTarget_window_open.js | 57 ++++++++++++++++++++++
 1 file changed, 57 insertions(+)

diff --git browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
index 1fbb3c07d4a9..232b9321fcd3 100644
--- browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
+++ browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
@@ -247,3 +247,60 @@ add_task(async function test_window_open_close_from_browserAction_popup() {
 
   await extension.unload();
 });
+
+add_task(async function test_window_open_in_named_win() {
+  const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
+
+  gBrowser.selectedTab = tab1;
+
+  const extension = ExtensionTestUtils.loadExtension({
+    background,
+    manifest: {
+      permissions: ["webNavigation", "tabs", "<all_urls>"],
+    },
+  });
+
+  await extension.startup();
+
+  const expectedSourceTab = await extension.awaitMessage("expectedSourceTab");
+
+  info("open a url in a new named window from a window.open call");
+
+  await runTestCase({
+    extension,
+    openNavTarget() {
+      extension.sendMessage({
+        type: "execute-contentscript",
+        code: `window.open("${OPENED_PAGE}#new-named-window-open", "TestWinName"); true;`,
+      });
+    },
+    expectedWebNavProps: {
+      sourceTabId: expectedSourceTab.sourceTabId,
+      sourceFrameId: 0,
+      url: `${OPENED_PAGE}#new-named-window-open`,
+    },
+  });
+
+  info("open a url in an existent named window from a window.open call");
+
+  await runTestCase({
+    extension,
+    openNavTarget() {
+      extension.sendMessage({
+        type: "execute-contentscript",
+        code: `window.open("${OPENED_PAGE}#existent-named-window-open", "TestWinName"); true;`,
+      });
+    },
+    expectedWebNavProps: {
+      sourceTabId: expectedSourceTab.sourceTabId,
+      sourceFrameId: 0,
+      url: `${OPENED_PAGE}#existent-named-window-open`,
+    },
+  });
+
+  assertNoPendingCreatedNavigationTargetData();
+
+  await BrowserTestUtils.removeTab(tab1);
+
+  await extension.unload();
+});

commit 2a05645d21a8
Author: Luca Greco <lgreco@mozilla.com>
Date:   Fri Oct 13 18:19:47 2017 +0200

    Bug 1403349 - Split webNavigation onCreatedNavigationTarget tests to prevent timeouts on linux32 debug. r=aswan, a=ritu
    
    MozReview-Commit-ID: 50JLocTVvfu
    
    --HG--
    rename : browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js => browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_named_window.js
    rename : browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js => browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_subframe_window_open.js
    extra : source : e802283bbf21d14d431901dd286681cd1933bb97
    extra : histedit_source : dfedfb9746b98e9ee96e768a53aa0f6cbdc8b6ee
---
 .../extensions/test/browser/browser-common.ini     |   3 +
 ..._ext_webNavigation_onCreatedNavigationTarget.js |  36 +----
 ...gation_onCreatedNavigationTarget_contextmenu.js |  47 ++----
 ...ation_onCreatedNavigationTarget_named_window.js |  97 ++++++++++++
 ...CreatedNavigationTarget_subframe_window_open.js | 163 +++++++++++++++++++++
 ...gation_onCreatedNavigationTarget_window_open.js | 153 +------------------
 .../extensions/test/browser/head_webNavigation.js  |  39 +++++
 7 files changed, 329 insertions(+), 209 deletions(-)

diff --git browser/components/extensions/test/browser/browser-common.ini browser/components/extensions/test/browser/browser-common.ini
index a03cb9147a7f..3a672f737a59 100644
--- browser/components/extensions/test/browser/browser-common.ini
+++ browser/components/extensions/test/browser/browser-common.ini
@@ -3,6 +3,7 @@ support-files =
   head.js
   head_pageAction.js
   head_sessions.js
+  head_webNavigation.js
   profilerSymbols.sjs
   context.html
   context_frame.html
@@ -171,6 +172,8 @@ skip-if = true # Bug 1398514
 [browser_ext_webNavigation_getFrames.js]
 [browser_ext_webNavigation_onCreatedNavigationTarget.js]
 [browser_ext_webNavigation_onCreatedNavigationTarget_contextmenu.js]
+[browser_ext_webNavigation_onCreatedNavigationTarget_named_window.js]
+[browser_ext_webNavigation_onCreatedNavigationTarget_subframe_window_open.js]
 [browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js]
 [browser_ext_webNavigation_urlbar_transitions.js]
 [browser_ext_windows.js]
diff --git browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget.js browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget.js
index 2c17f9e711f8..47d8b0a8c65a 100644
--- browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget.js
+++ browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget.js
@@ -2,9 +2,8 @@
 /* vim: set sts=2 sw=2 et tw=80: */
 "use strict";
 
-const BASE_URL = "http://mochi.test:8888/browser/browser/components/extensions/test/browser";
-const SOURCE_PAGE = `${BASE_URL}/webNav_createdTargetSource.html`;
-const OPENED_PAGE = `${BASE_URL}/webNav_createdTarget.html`;
+Services.scriptloader.loadSubScript(new URL("head_webNavigation.js", gTestPath).href,
+                                    this);
 
 async function background() {
   const tabs = await browser.tabs.query({active: true, currentWindow: true});
@@ -34,24 +33,6 @@ async function background() {
   });
 }
 
-async function runTestCase({extension, openNavTarget, expectedWebNavProps}) {
-  await openNavTarget();
-
-  const webNavMsg = await extension.awaitMessage("webNavOnCreated");
-  const createdTabId = await extension.awaitMessage("tabsOnCreated");
-  const completedNavMsg = await extension.awaitMessage("webNavOnCompleted");
-
-  let {sourceTabId, sourceFrameId, url} = expectedWebNavProps;
-
-  is(webNavMsg.tabId, createdTabId, "Got the expected tabId property");
-  is(webNavMsg.sourceTabId, sourceTabId, "Got the expected sourceTabId property");
-  is(webNavMsg.sourceFrameId, sourceFrameId, "Got the expected sourceFrameId property");
-  is(webNavMsg.url, url, "Got the expected url property");
-
-  is(completedNavMsg.tabId, createdTabId, "Got the expected webNavigation.onCompleted tabId property");
-  is(completedNavMsg.url, url, "Got the expected webNavigation.onCompleted url property");
-}
-
 add_task(async function test_on_created_navigation_target_from_mouse_click() {
   const tab = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
 
@@ -68,7 +49,7 @@ add_task(async function test_on_created_navigation_target_from_mouse_click() {
 
   info("Open link in a new tab using Ctrl-click");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     openNavTarget() {
       BrowserTestUtils.synthesizeMouseAtCenter("#test-create-new-tab-from-mouse-click",
@@ -84,7 +65,7 @@ add_task(async function test_on_created_navigation_target_from_mouse_click() {
 
   info("Open link in a new window using Shift-click");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     openNavTarget() {
       BrowserTestUtils.synthesizeMouseAtCenter("#test-create-new-window-from-mouse-click",
@@ -100,7 +81,7 @@ add_task(async function test_on_created_navigation_target_from_mouse_click() {
 
   info("Open link with target=\"_blank\" in a new tab using click");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     openNavTarget() {
       BrowserTestUtils.synthesizeMouseAtCenter("#test-create-new-tab-from-targetblank-click",
@@ -135,7 +116,7 @@ add_task(async function test_on_created_navigation_target_from_mouse_click_subfr
 
   info("Open a subframe link in a new tab using Ctrl-click");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     openNavTarget() {
       BrowserTestUtils.synthesizeMouseAtCenter(function() {
@@ -154,7 +135,7 @@ add_task(async function test_on_created_navigation_target_from_mouse_click_subfr
 
   info("Open a subframe link in a new window using Shift-click");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     openNavTarget() {
       BrowserTestUtils.synthesizeMouseAtCenter(function() {
@@ -173,7 +154,7 @@ add_task(async function test_on_created_navigation_target_from_mouse_click_subfr
 
   info("Open a subframe link with target=\"_blank\" in a new tab using click");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     openNavTarget() {
       BrowserTestUtils.synthesizeMouseAtCenter(function() {
@@ -194,4 +175,3 @@ add_task(async function test_on_created_navigation_target_from_mouse_click_subfr
 
   await extension.unload();
 });
-
diff --git browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_contextmenu.js browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_contextmenu.js
index 670dad87f1e4..e29fccf57a5b 100644
--- browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_contextmenu.js
+++ browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_contextmenu.js
@@ -2,9 +2,16 @@
 /* vim: set sts=2 sw=2 et tw=80: */
 "use strict";
 
-const BASE_URL = "http://mochi.test:8888/browser/browser/components/extensions/test/browser";
-const SOURCE_PAGE = `${BASE_URL}/webNav_createdTargetSource.html`;
-const OPENED_PAGE = `${BASE_URL}/webNav_createdTarget.html`;
+Services.scriptloader.loadSubScript(new URL("head_webNavigation.js", gTestPath).href,
+                                    this);
+
+async function clickContextMenuItem({pageElementSelector, contextMenuItemLabel}) {
+  const contentAreaContextMenu = await openContextMenu(pageElementSelector);
+  const item = contentAreaContextMenu.getElementsByAttribute("label", contextMenuItemLabel);
+  is(item.length, 1, `found contextMenu item for "${contextMenuItemLabel}"`);
+  item[0].click();
+  await closeContextMenu();
+}
 
 async function background() {
   const tabs = await browser.tabs.query({active: true, currentWindow: true});
@@ -34,32 +41,6 @@ async function background() {
   });
 }
 
-async function runTestCase({extension, openNavTarget, expectedWebNavProps}) {
-  await openNavTarget();
-
-  const webNavMsg = await extension.awaitMessage("webNavOnCreated");
-  const createdTabId = await extension.awaitMessage("tabsOnCreated");
-  const completedNavMsg = await extension.awaitMessage("webNavOnCompleted");
-
-  let {sourceTabId, sourceFrameId, url} = expectedWebNavProps;
-
-  is(webNavMsg.tabId, createdTabId, "Got the expected tabId property");
-  is(webNavMsg.sourceTabId, sourceTabId, "Got the expected sourceTabId property");
-  is(webNavMsg.sourceFrameId, sourceFrameId, "Got the expected sourceFrameId property");
-  is(webNavMsg.url, url, "Got the expected url property");
-
-  is(completedNavMsg.tabId, createdTabId, "Got the expected webNavigation.onCompleted tabId property");
-  is(completedNavMsg.url, url, "Got the expected webNavigation.onCompleted url property");
-}
-
-async function clickContextMenuItem({pageElementSelector, contextMenuItemLabel}) {
-  const contentAreaContextMenu = await openContextMenu(pageElementSelector);
-  const item = contentAreaContextMenu.getElementsByAttribute("label", contextMenuItemLabel);
-  is(item.length, 1, `found contextMenu item for "${contextMenuItemLabel}"`);
-  item[0].click();
-  await closeContextMenu();
-}
-
 add_task(async function test_on_created_navigation_target_from_context_menu() {
   const tab = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
 
@@ -76,7 +57,7 @@ add_task(async function test_on_created_navigation_target_from_context_menu() {
 
   info("Open link in a new tab from the context menu");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     async openNavTarget() {
       await clickContextMenuItem({
@@ -93,7 +74,7 @@ add_task(async function test_on_created_navigation_target_from_context_menu() {
 
   info("Open link in a new window from the context menu");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     async openNavTarget() {
       await clickContextMenuItem({
@@ -129,7 +110,7 @@ add_task(async function test_on_created_navigation_target_from_context_menu_subf
 
   info("Open a subframe link in a new tab from the context menu");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     async openNavTarget() {
       await clickContextMenuItem({
@@ -151,7 +132,7 @@ add_task(async function test_on_created_navigation_target_from_context_menu_subf
 
   info("Open a subframe link in a new window from the context menu");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     async openNavTarget() {
       await clickContextMenuItem({
diff --git browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_named_window.js browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_named_window.js
new file mode 100644
index 000000000000..9888bfb23da6
--- /dev/null
+++ browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_named_window.js
@@ -0,0 +1,97 @@
+/* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set sts=2 sw=2 et tw=80: */
+"use strict";
+
+Services.scriptloader.loadSubScript(new URL("head_webNavigation.js", gTestPath).href,
+                                    this);
+
+async function background() {
+  const tabs = await browser.tabs.query({active: true, currentWindow: true});
+  const sourceTabId = tabs[0].id;
+
+  const sourceTabFrames = await browser.webNavigation.getAllFrames({tabId: sourceTabId});
+
+  browser.webNavigation.onCreatedNavigationTarget.addListener((msg) => {
+    browser.test.sendMessage("webNavOnCreated", msg);
+  });
+
+  browser.webNavigation.onCompleted.addListener(async (msg) => {
+    // NOTE: checking the url is currently necessary because of Bug 1252129
+    // ( Filter out webNavigation events related to new window initialization phase).
+    if (msg.tabId !== sourceTabId && msg.url !== "about:blank") {
+      await browser.tabs.remove(msg.tabId);
+      browser.test.sendMessage("webNavOnCompleted", msg);
+    }
+  });
+
+  browser.tabs.onCreated.addListener((tab) => {
+    browser.test.sendMessage("tabsOnCreated", tab.id);
+  });
+
+  browser.test.onMessage.addListener(({type, code}) => {
+    if (type === "execute-contentscript") {
+      browser.tabs.executeScript(sourceTabId, {code: code});
+    }
+  });
+
+  browser.test.sendMessage("expectedSourceTab", {
+    sourceTabId, sourceTabFrames,
+  });
+}
+
+add_task(async function test_window_open_in_named_win() {
+  const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
+
+  gBrowser.selectedTab = tab1;
+
+  const extension = ExtensionTestUtils.loadExtension({
+    background,
+    manifest: {
+      permissions: ["webNavigation", "tabs", "<all_urls>"],
+    },
+  });
+
+  await extension.startup();
+
+  const expectedSourceTab = await extension.awaitMessage("expectedSourceTab");
+
+  info("open a url in a new named window from a window.open call");
+
+  await runCreatedNavigationTargetTest({
+    extension,
+    openNavTarget() {
+      extension.sendMessage({
+        type: "execute-contentscript",
+        code: `window.open("${OPENED_PAGE}#new-named-window-open", "TestWinName"); true;`,
+      });
+    },
+    expectedWebNavProps: {
+      sourceTabId: expectedSourceTab.sourceTabId,
+      sourceFrameId: 0,
+      url: `${OPENED_PAGE}#new-named-window-open`,
+    },
+  });
+
+  info("open a url in an existent named window from a window.open call");
+
+  await runCreatedNavigationTargetTest({
+    extension,
+    openNavTarget() {
+      extension.sendMessage({
+        type: "execute-contentscript",
+        code: `window.open("${OPENED_PAGE}#existent-named-window-open", "TestWinName"); true;`,
+      });
+    },
+    expectedWebNavProps: {
+      sourceTabId: expectedSourceTab.sourceTabId,
+      sourceFrameId: 0,
+      url: `${OPENED_PAGE}#existent-named-window-open`,
+    },
+  });
+
+  assertNoPendingCreatedNavigationTargetData();
+
+  await BrowserTestUtils.removeTab(tab1);
+
+  await extension.unload();
+});
diff --git browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_subframe_window_open.js browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_subframe_window_open.js
new file mode 100644
index 000000000000..147c943f7102
--- /dev/null
+++ browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_subframe_window_open.js
@@ -0,0 +1,163 @@
+/* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set sts=2 sw=2 et tw=80: */
+"use strict";
+
+Services.scriptloader.loadSubScript(new URL("head_webNavigation.js", gTestPath).href,
+                                    this);
+
+async function background() {
+  const tabs = await browser.tabs.query({active: true, currentWindow: true});
+  const sourceTabId = tabs[0].id;
+
+  const sourceTabFrames = await browser.webNavigation.getAllFrames({tabId: sourceTabId});
+
+  browser.webNavigation.onCreatedNavigationTarget.addListener((msg) => {
+    browser.test.sendMessage("webNavOnCreated", msg);
+  });
+
+  browser.webNavigation.onCompleted.addListener(async (msg) => {
+    // NOTE: checking the url is currently necessary because of Bug 1252129
+    // ( Filter out webNavigation events related to new window initialization phase).
+    if (msg.tabId !== sourceTabId && msg.url !== "about:blank") {
+      await browser.tabs.remove(msg.tabId);
+      browser.test.sendMessage("webNavOnCompleted", msg);
+    }
+  });
+
+  browser.tabs.onCreated.addListener((tab) => {
+    browser.test.sendMessage("tabsOnCreated", tab.id);
+  });
+
+  browser.test.onMessage.addListener(({type, code}) => {
+    if (type === "execute-contentscript") {
+      browser.tabs.executeScript(sourceTabId, {code: code});
+    }
+  });
+
+  browser.test.sendMessage("expectedSourceTab", {
+    sourceTabId, sourceTabFrames,
+  });
+}
+
+add_task(async function test_window_open_from_subframe() {
+  const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
+
+  gBrowser.selectedTab = tab1;
+
+  const extension = ExtensionTestUtils.loadExtension({
+    background,
+    manifest: {
+      permissions: ["webNavigation", "tabs", "<all_urls>"],
+    },
+  });
+
+  await extension.startup();
+
+  const expectedSourceTab = await extension.awaitMessage("expectedSourceTab");
+
+  info("open a url in a new tab from subframe window.open call");
+
+  await runCreatedNavigationTargetTest({
+    extension,
+    openNavTarget() {
+      extension.sendMessage({
+        type: "execute-contentscript",
+        code: `document.querySelector('iframe').contentWindow.open("${OPENED_PAGE}#new-tab-from-window-open-subframe"); true;`,
+      });
+    },
+    expectedWebNavProps: {
+      sourceTabId: expectedSourceTab.sourceTabId,
+      sourceFrameId: expectedSourceTab.sourceTabFrames[1].frameId,
+      url: `${OPENED_PAGE}#new-tab-from-window-open-subframe`,
+    },
+  });
+
+  info("open a url in a new window from subframe window.open call");
+
+  await runCreatedNavigationTargetTest({
+    extension,
+    openNavTarget() {
+      extension.sendMessage({
+        type: "execute-contentscript",
+        code: `document.querySelector('iframe').contentWindow.open("${OPENED_PAGE}#new-win-from-window-open-subframe", "_blank", "toolbar=0"); true;`,
+      });
+    },
+    expectedWebNavProps: {
+      sourceTabId: expectedSourceTab.sourceTabId,
+      sourceFrameId: expectedSourceTab.sourceTabFrames[1].frameId,
+      url: `${OPENED_PAGE}#new-win-from-window-open-subframe`,
+    },
+  });
+
+  assertNoPendingCreatedNavigationTargetData();
+
+  await BrowserTestUtils.removeTab(tab1);
+
+  await extension.unload();
+});
+
+add_task(async function test_window_open_close_from_browserAction_popup() {
+  const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
+
+  gBrowser.selectedTab = tab1;
+
+  function popup() {
+    window.open("", "_self").close();
+
+    browser.test.sendMessage("browserAction_popup_executed");
+  }
+
+  const extension = ExtensionTestUtils.loadExtension({
+    background,
+    manifest: {
+      browser_action: {
+        default_popup: "popup.html",
+      },
+      permissions: ["webNavigation", "tabs", "<all_urls>"],
+    },
+    files: {
+      "popup.html": `<!DOCTYPE html>
+        <html>
+          <head>
+            <meta charset="utf-8">
+          </head>
+          <body>
+            <script src="popup.js"></script>
+          </body>
+        </html>
+      `,
+      "popup.js": popup,
+    },
+  });
+
+  await extension.startup();
+
+  const expectedSourceTab = await extension.awaitMessage("expectedSourceTab");
+
+  clickBrowserAction(extension);
+
+  await extension.awaitMessage("browserAction_popup_executed");
+
+  info("open a url in a new tab from a window.open call");
+
+  await runCreatedNavigationTargetTest({
+    extension,
+    openNavTarget() {
+      extension.sendMessage({
+        type: "execute-contentscript",
+        code: `window.open("${OPENED_PAGE}#new-tab-from-window-open"); true;`,
+      });
+    },
+    expectedWebNavProps: {
+      sourceTabId: expectedSourceTab.sourceTabId,
+      sourceFrameId: 0,
+      url: `${OPENED_PAGE}#new-tab-from-window-open`,
+    },
+  });
+
+  assertNoPendingCreatedNavigationTargetData();
+
+  await BrowserTestUtils.removeTab(tab1);
+
+  await extension.unload();
+});
diff --git browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
index 232b9321fcd3..b56097e44484 100644
--- browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
+++ browser/components/extensions/test/browser/browser_ext_webNavigation_onCreatedNavigationTarget_window_open.js
@@ -2,9 +2,8 @@
 /* vim: set sts=2 sw=2 et tw=80: */
 "use strict";
 
-const BASE_URL = "http://mochi.test:8888/browser/browser/components/extensions/test/browser";
-const SOURCE_PAGE = `${BASE_URL}/webNav_createdTargetSource.html`;
-const OPENED_PAGE = `${BASE_URL}/webNav_createdTarget.html`;
+Services.scriptloader.loadSubScript(new URL("head_webNavigation.js", gTestPath).href,
+                                    this);
 
 async function background() {
   const tabs = await browser.tabs.query({active: true, currentWindow: true});
@@ -40,34 +39,6 @@ async function background() {
   });
 }
 
-async function runTestCase({extension, openNavTarget, expectedWebNavProps}) {
-  await openNavTarget();
-
-  const webNavMsg = await extension.awaitMessage("webNavOnCreated");
-  const createdTabId = await extension.awaitMessage("tabsOnCreated");
-  const completedNavMsg = await extension.awaitMessage("webNavOnCompleted");
-
-  let {sourceTabId, sourceFrameId, url} = expectedWebNavProps;
-
-  is(webNavMsg.tabId, createdTabId, "Got the expected tabId property");
-  is(webNavMsg.sourceTabId, sourceTabId, "Got the expected sourceTabId property");
-  is(webNavMsg.sourceFrameId, sourceFrameId, "Got the expected sourceFrameId property");
-  is(webNavMsg.url, url, "Got the expected url property");
-
-  is(completedNavMsg.tabId, createdTabId, "Got the expected webNavigation.onCompleted tabId property");
-  is(completedNavMsg.url, url, "Got the expected webNavigation.onCompleted url property");
-}
-
-// Test that there are no pending createdNavigationTarget messages still tracked
-// in WebNavigation.jsm (to be called before the extension is unloaded, because
-// once the last extension which have subscribed a webNavigation event is unloaded
-// all the pending created navigation target data is completely cleared).
-function assertNoPendingCreatedNavigationTargetData() {
-  const {Manager} = Cu.import("resource://gre/modules/WebNavigation.jsm", {});
-  Assert.equal(Manager.createdNavigationTargetByOuterWindowId.size, 0,
-               "There should be no pending createdNavigationTarget messages in WebNavigation");
-}
-
 add_task(async function test_window_open() {
   const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
 
@@ -86,7 +57,7 @@ add_task(async function test_window_open() {
 
   info("open a url in a new tab from a window.open call");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     openNavTarget() {
       extension.sendMessage({
@@ -103,7 +74,7 @@ add_task(async function test_window_open() {
 
   info("open a url in a new window from a window.open call");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     openNavTarget() {
       extension.sendMessage({
@@ -125,63 +96,6 @@ add_task(async function test_window_open() {
   await extension.unload();
 });
 
-add_task(async function test_window_open_from_subframe() {
-  const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
-
-  gBrowser.selectedTab = tab1;
-
-  const extension = ExtensionTestUtils.loadExtension({
-    background,
-    manifest: {
-      permissions: ["webNavigation", "tabs", "<all_urls>"],
-    },
-  });
-
-  await extension.startup();
-
-  const expectedSourceTab = await extension.awaitMessage("expectedSourceTab");
-
-  info("open a url in a new tab from subframe window.open call");
-
-  await runTestCase({
-    extension,
-    openNavTarget() {
-      extension.sendMessage({
-        type: "execute-contentscript",
-        code: `document.querySelector('iframe').contentWindow.open("${OPENED_PAGE}#new-tab-from-window-open-subframe"); true;`,
-      });
-    },
-    expectedWebNavProps: {
-      sourceTabId: expectedSourceTab.sourceTabId,
-      sourceFrameId: expectedSourceTab.sourceTabFrames[1].frameId,
-      url: `${OPENED_PAGE}#new-tab-from-window-open-subframe`,
-    },
-  });
-
-  info("open a url in a new window from subframe window.open call");
-
-  await runTestCase({
-    extension,
-    openNavTarget() {
-      extension.sendMessage({
-        type: "execute-contentscript",
-        code: `document.querySelector('iframe').contentWindow.open("${OPENED_PAGE}#new-win-from-window-open-subframe", "_blank", "toolbar=0"); true;`,
-      });
-    },
-    expectedWebNavProps: {
-      sourceTabId: expectedSourceTab.sourceTabId,
-      sourceFrameId: expectedSourceTab.sourceTabFrames[1].frameId,
-      url: `${OPENED_PAGE}#new-win-from-window-open-subframe`,
-    },
-  });
-
-  assertNoPendingCreatedNavigationTargetData();
-
-  await BrowserTestUtils.removeTab(tab1);
-
-  await extension.unload();
-});
-
 add_task(async function test_window_open_close_from_browserAction_popup() {
   const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
 
@@ -226,7 +140,7 @@ add_task(async function test_window_open_close_from_browserAction_popup() {
 
   info("open a url in a new tab from a window.open call");
 
-  await runTestCase({
+  await runCreatedNavigationTargetTest({
     extension,
     openNavTarget() {
       extension.sendMessage({
@@ -247,60 +161,3 @@ add_task(async function test_window_open_close_from_browserAction_popup() {
 
   await extension.unload();
 });
-
-add_task(async function test_window_open_in_named_win() {
-  const tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, SOURCE_PAGE);
-
-  gBrowser.selectedTab = tab1;
-
-  const extension = ExtensionTestUtils.loadExtension({
-    background,
-    manifest: {
-      permissions: ["webNavigation", "tabs", "<all_urls>"],
-    },
-  });
-
-  await extension.startup();
-
-  const expectedSourceTab = await extension.awaitMessage("expectedSourceTab");
-
-  info("open a url in a new named window from a window.open call");
-
-  await runTestCase({
-    extension,
-    openNavTarget() {
-      extension.sendMessage({
-        type: "execute-contentscript",
-        code: `window.open("${OPENED_PAGE}#new-named-window-open", "TestWinName"); true;`,
-      });
-    },
-    expectedWebNavProps: {
-      sourceTabId: expectedSourceTab.sourceTabId,
-      sourceFrameId: 0,
-      url: `${OPENED_PAGE}#new-named-window-open`,
-    },
-  });
-
-  info("open a url in an existent named window from a window.open call");
-
-  await runTestCase({
-    extension,
-    openNavTarget() {
-      extension.sendMessage({
-        type: "execute-contentscript",
-        code: `window.open("${OPENED_PAGE}#existent-named-window-open", "TestWinName"); true;`,
-      });
-    },
-    expectedWebNavProps: {
-      sourceTabId: expectedSourceTab.sourceTabId,
-      sourceFrameId: 0,
-      url: `${OPENED_PAGE}#existent-named-window-open`,
-    },
-  });
-
-  assertNoPendingCreatedNavigationTargetData();
-
-  await BrowserTestUtils.removeTab(tab1);
-
-  await extension.unload();
-});
diff --git browser/components/extensions/test/browser/head_webNavigation.js browser/components/extensions/test/browser/head_webNavigation.js
new file mode 100644
index 000000000000..a98ccd9934ba
--- /dev/null
+++ browser/components/extensions/test/browser/head_webNavigation.js
@@ -0,0 +1,39 @@
+/* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set sts=2 sw=2 et tw=80: */
+"use strict";
+
+/* exported BASE_URL, SOURCE_PAGE, OPENED_PAGE,
+   runCreatedNavigationTargetTest, assertNoPendingCreatedNavigationTargetData */
+
+const BASE_URL = "http://mochi.test:8888/browser/browser/components/extensions/test/browser";
+const SOURCE_PAGE = `${BASE_URL}/webNav_createdTargetSource.html`;
+const OPENED_PAGE = `${BASE_URL}/webNav_createdTarget.html`;
+
+async function runCreatedNavigationTargetTest({extension, openNavTarget, expectedWebNavProps}) {
+  await openNavTarget();
+
+  const webNavMsg = await extension.awaitMessage("webNavOnCreated");
+  const createdTabId = await extension.awaitMessage("tabsOnCreated");
+  const completedNavMsg = await extension.awaitMessage("webNavOnCompleted");
+
+  let {sourceTabId, sourceFrameId, url} = expectedWebNavProps;
+
+  is(webNavMsg.tabId, createdTabId, "Got the expected tabId property");
+  is(webNavMsg.sourceTabId, sourceTabId, "Got the expected sourceTabId property");
+  is(webNavMsg.sourceFrameId, sourceFrameId, "Got the expected sourceFrameId property");
+  is(webNavMsg.url, url, "Got the expected url property");
+
+  is(completedNavMsg.tabId, createdTabId, "Got the expected webNavigation.onCompleted tabId property");
+  is(completedNavMsg.url, url, "Got the expected webNavigation.onCompleted url property");
+}
+
+
+// Test that there are no pending createdNavigationTarget messages still tracked
+// in WebNavigation.jsm (to be called before the extension is unloaded, because
+// once the last extension which have subscribed a webNavigation event is unloaded
+// all the pending created navigation target data is completely cleared).
+function assertNoPendingCreatedNavigationTargetData() {
+  const {Manager} = Cu.import("resource://gre/modules/WebNavigation.jsm", {});
+  Assert.equal(Manager.createdNavigationTargetByOuterWindowId.size, 0,
+               "There should be no pending createdNavigationTarget messages in WebNavigation");
+}
