commit 708a5eba5908
Author: Kris Maglione <maglione.k@gmail.com>
Date:   Wed Sep 20 16:12:27 2017 -0700

    Bug 1379148 - Part 1: Allow blocking only non-script-created parsers. r=hsivonen, a=sledru
    
    MozReview-Commit-ID: 8cGxywiUzWj
    
    --HG--
    extra : source : bee57767629862c4b4bfa6258918551ed7d82998
---
 dom/base/nsDocument.cpp    | 10 ++++++----
 dom/base/nsIDocument.h     |  1 +
 dom/webidl/Document.webidl | 11 ++++++++++-
 3 files changed, 17 insertions(+), 5 deletions(-)

diff --git dom/base/nsDocument.cpp dom/base/nsDocument.cpp
index 086b386d35f0..d7d1428966f1 100644
--- dom/base/nsDocument.cpp
+++ dom/base/nsDocument.cpp
@@ -10919,11 +10919,12 @@ public:
   NS_DECL_CYCLE_COLLECTING_ISUPPORTS
   NS_DECL_CYCLE_COLLECTION_CLASS(UnblockParsingPromiseHandler)
 
-  explicit UnblockParsingPromiseHandler(nsIDocument* aDocument, Promise* aPromise)
+  explicit UnblockParsingPromiseHandler(nsIDocument* aDocument, Promise* aPromise,
+                                        const BlockParsingOptions& aOptions)
     : mPromise(aPromise)
   {
     nsCOMPtr<nsIParser> parser = aDocument->CreatorParserOrNull();
-    if (parser) {
+    if (parser && (aOptions.mBlockScriptCreated || !parser->IsScriptCreated())) {
       parser->BlockParser();
       mParser = do_GetWeakReference(parser);
       mDocument = aDocument;
@@ -10986,14 +10987,15 @@ NS_IMPL_CYCLE_COLLECTING_ADDREF(UnblockParsingPromiseHandler)
 NS_IMPL_CYCLE_COLLECTING_RELEASE(UnblockParsingPromiseHandler)
 
 already_AddRefed<Promise>
-nsIDocument::BlockParsing(Promise& aPromise, ErrorResult& aRv)
+nsIDocument::BlockParsing(Promise& aPromise, const BlockParsingOptions& aOptions, ErrorResult& aRv)
 {
   RefPtr<Promise> resultPromise = Promise::Create(aPromise.GetParentObject(), aRv);
   if (aRv.Failed()) {
     return nullptr;
   }
 
-  RefPtr<PromiseNativeHandler> promiseHandler = new UnblockParsingPromiseHandler(this, resultPromise);
+  RefPtr<PromiseNativeHandler> promiseHandler = new UnblockParsingPromiseHandler(this, resultPromise,
+                                                                                 aOptions);
   aPromise.AppendNativeHandler(promiseHandler);
 
   return resultPromise.forget();
diff --git dom/base/nsIDocument.h dom/base/nsIDocument.h
index 2f287ae2ccb7..512de896fddf 100644
--- dom/base/nsIDocument.h
+++ dom/base/nsIDocument.h
@@ -2952,6 +2952,7 @@ public:
   void ObsoleteSheet(const nsAString& aSheetURI, mozilla::ErrorResult& rv);
 
   already_AddRefed<mozilla::dom::Promise> BlockParsing(mozilla::dom::Promise& aPromise,
+                                                       const mozilla::dom::BlockParsingOptions& aOptions,
                                                        mozilla::ErrorResult& aRv);
 
   already_AddRefed<nsIURI> GetMozDocumentURIIfNotForErrorPages();
diff --git dom/webidl/Document.webidl dom/webidl/Document.webidl
index 8a629502a6ce..f83874fa7315 100644
--- dom/webidl/Document.webidl
+++ dom/webidl/Document.webidl
@@ -385,13 +385,22 @@ partial interface Document {
 
   // Blocks the initial document parser until the given promise is settled.
   [ChromeOnly, Throws]
-  Promise<any> blockParsing(Promise<any> promise);
+  Promise<any> blockParsing(Promise<any> promise,
+                            optional BlockParsingOptions options);
 
   // like documentURI, except that for error pages, it returns the URI we were
   // trying to load when we hit an error, rather than the error page's own URI.
   [ChromeOnly] readonly attribute URI? mozDocumentURIIfNotForErrorPages;
 };
 
+dictionary BlockParsingOptions {
+  /**
+   * If true, blocks script-created parsers (created via document.open()) in
+   * addition to network-created parsers.
+   */
+  boolean blockScriptCreated = true;
+};
+
 // Extension to give chrome JS the ability to determine when a document was
 // created to satisfy an iframe with srcdoc attribute.
 partial interface Document {

commit 0947c7c07361
Author: Kris Maglione <maglione.k@gmail.com>
Date:   Wed Sep 20 16:13:03 2017 -0700

    Bug 1379148 - Part 2: Don't block script-created parsers when executing content scripts. r=mixedpuppy, a=sledru
    
    MozReview-Commit-ID: GsqsaOVob4B
    
    --HG--
    extra : source : ba22a83959a06a457c8a22d0cd9521eaed220bac
---
 toolkit/components/extensions/ExtensionContent.jsm | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git toolkit/components/extensions/ExtensionContent.jsm toolkit/components/extensions/ExtensionContent.jsm
index 3429ae14daff..c05a00e95398 100644
--- toolkit/components/extensions/ExtensionContent.jsm
+++ toolkit/components/extensions/ExtensionContent.jsm
@@ -324,7 +324,7 @@ class Script {
     // until the scripts have been loaded.
     let {document} = context.contentWindow;
     if (this.runAt === "document_start" && document.readyState !== "complete") {
-      document.blockParsing(scriptsPromise);
+      document.blockParsing(scriptsPromise, {blockScriptCreated: false});
     }
 
     let scripts = await scriptsPromise;

commit 5f856a2ba599
Author: Kris Maglione <maglione.k@gmail.com>
Date:   Wed Sep 20 17:00:44 2017 -0700

    Bug 1379148 - Part 3: Inject scripts synchronously if they're already available. r=mixedpuppy, a=sledru
    
    MozReview-Commit-ID: J6vheuxsqJR
    
    --HG--
    extra : source : 14ab0648ea9194b7ad84ecf7a330c9bbdadfb303
---
 toolkit/components/extensions/ExtensionContent.jsm | 36 ++++++++++++++++------
 toolkit/components/extensions/ExtensionUtils.jsm   | 12 +++++---
 2 files changed, 34 insertions(+), 14 deletions(-)

diff --git toolkit/components/extensions/ExtensionContent.jsm toolkit/components/extensions/ExtensionContent.jsm
index c05a00e95398..9af6870a829b 100644
--- toolkit/components/extensions/ExtensionContent.jsm
+++ toolkit/components/extensions/ExtensionContent.jsm
@@ -137,8 +137,16 @@ class CacheMap extends DefaultMap {
 
 class ScriptCache extends CacheMap {
   constructor(options) {
-    super(SCRIPT_EXPIRY_TIMEOUT_MS,
-          url => ChromeUtils.compileScript(url, options));
+    super(SCRIPT_EXPIRY_TIMEOUT_MS);
+    this.options = options;
+  }
+
+  defaultConstructor(url) {
+    let promise = ChromeUtils.compileScript(url, this.options);
+    promise.then(script => {
+      promise.script = script;
+    });
+    return promise;
   }
 }
 
@@ -317,17 +325,25 @@ class Script {
       }
     }
 
-    let scriptsPromise = Promise.all(this.compileScripts());
+    let scriptPromises = this.compileScripts();
+
+    let scripts = scriptPromises.map(promise => promise.script);
+    // If not all scripts are already available in the cache, block
+    // parsing and wait all promises to resolve.
+    if (!scripts.every(script => script)) {
+      let promise = Promise.all(scriptPromises);
+
+      // If we're supposed to inject at the start of the document load,
+      // and we haven't already missed that point, block further parsing
+      // until the scripts have been loaded.
+      let {document} = context.contentWindow;
+      if (this.runAt === "document_start" && document.readyState !== "complete") {
+        document.blockParsing(promise, {blockScriptCreated: false});
+      }
 
-    // If we're supposed to inject at the start of the document load,
-    // and we haven't already missed that point, block further parsing
-    // until the scripts have been loaded.
-    let {document} = context.contentWindow;
-    if (this.runAt === "document_start" && document.readyState !== "complete") {
-      document.blockParsing(scriptsPromise, {blockScriptCreated: false});
+      scripts = await promise;
     }
 
-    let scripts = await scriptsPromise;
     let result;
 
     // The evaluations below may throw, in which case the promise will be
diff --git toolkit/components/extensions/ExtensionUtils.jsm toolkit/components/extensions/ExtensionUtils.jsm
index a3ed895de6df..4a5fcb19c58d 100644
--- toolkit/components/extensions/ExtensionUtils.jsm
+++ toolkit/components/extensions/ExtensionUtils.jsm
@@ -67,9 +67,11 @@ function instanceOf(value, type) {
  * constructor if one is not present.
  */
 class DefaultWeakMap extends WeakMap {
-  constructor(defaultConstructor, init) {
+  constructor(defaultConstructor = undefined, init = undefined) {
     super(init);
-    this.defaultConstructor = defaultConstructor;
+    if (defaultConstructor) {
+      this.defaultConstructor = defaultConstructor;
+    }
   }
 
   get(key) {
@@ -83,9 +85,11 @@ class DefaultWeakMap extends WeakMap {
 }
 
 class DefaultMap extends Map {
-  constructor(defaultConstructor, init) {
+  constructor(defaultConstructor = undefined, init = undefined) {
     super(init);
-    this.defaultConstructor = defaultConstructor;
+    if (defaultConstructor) {
+      this.defaultConstructor = defaultConstructor;
+    }
   }
 
   get(key) {

commit 3ab96ab42d99
Author: Kris Maglione <maglione.k@gmail.com>
Date:   Wed Sep 20 17:01:33 2017 -0700

    Bug 1379148 - Part 4: Add tests for document.write() with document_start content script present. r=mixedpuppy, a=sledru
    
    MozReview-Commit-ID: 5yxgpur1tvf
    
    --HG--
    extra : source : 14298b92236cfcfdd0b9dc43d8077e576f775b4d
---
 .../extensions/ExtensionXPCShellUtils.jsm          |  5 +++
 .../test/xpcshell/data/file_document_write.html    | 35 ++++++++++++++++
 .../test_ext_contentscript_scriptCreated.js        | 49 ++++++++++++++++++++++
 .../extensions/test/xpcshell/xpcshell-content.ini  |  1 +
 4 files changed, 90 insertions(+)

diff --git toolkit/components/extensions/ExtensionXPCShellUtils.jsm toolkit/components/extensions/ExtensionXPCShellUtils.jsm
index d16003d79944..3420ce175d8a 100644
--- toolkit/components/extensions/ExtensionXPCShellUtils.jsm
+++ toolkit/components/extensions/ExtensionXPCShellUtils.jsm
@@ -59,6 +59,11 @@ function frameScript() {
   Components.utils.import("resource://gre/modules/Services.jsm");
 
   Services.obs.notifyObservers(this, "tab-content-frameloader-created");
+
+  // eslint-disable-next-line mozilla/balanced-listeners
+  addEventListener("MozHeapMinimize", () => {
+    Services.obs.notifyObservers(null, "memory-pressure", "heap-minimize");
+  }, true, true);
 }
 
 const FRAME_SCRIPT = `data:text/javascript,(${encodeURI(frameScript)}).call(this)`;
diff --git toolkit/components/extensions/test/xpcshell/data/file_document_write.html toolkit/components/extensions/test/xpcshell/data/file_document_write.html
new file mode 100644
index 000000000000..fbae3d6d763a
--- /dev/null
+++ toolkit/components/extensions/test/xpcshell/data/file_document_write.html
@@ -0,0 +1,35 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+<meta charset="utf-8">
+</head>
+<body>
+  <iframe id="iframe"></iframe>
+
+  <script type="text/javascript">
+    "use strict";
+    addEventListener("load", () => {
+      // Send a heap-minimize observer notification so our script cache is
+      // cleared, and our content script isn't available for synchronous
+      // insertion.
+      window.dispatchEvent(new CustomEvent("MozHeapMinimize"));
+
+      let iframe = document.getElementById("iframe");
+      let doc = iframe.contentDocument;
+      doc.open("text/html");
+      // We need to do two writes here. The first creates the document element,
+      // which normally triggers parser blocking. The second triggers the
+      // creation of the element we're about to query for, which would normally
+      // happen asynchronously if the parser were blocked.
+      doc.write("<div id=meh>");
+      doc.write("<div id=beer></div>");
+
+      let elem = doc.getElementById("beer");
+      top.postMessage(elem instanceof HTMLDivElement ? "ok" : "fail",
+                      "*");
+
+      doc.close();
+    }, {once: true});
+  </script>
+</body>
+</html>
diff --git toolkit/components/extensions/test/xpcshell/test_ext_contentscript_scriptCreated.js toolkit/components/extensions/test/xpcshell/test_ext_contentscript_scriptCreated.js
new file mode 100644
index 000000000000..00407b914015
--- /dev/null
+++ toolkit/components/extensions/test/xpcshell/test_ext_contentscript_scriptCreated.js
@@ -0,0 +1,49 @@
+"use strict";
+
+const server = createHttpServer();
+server.registerDirectory("/data/", do_get_file("data"));
+
+const BASE_URL = `http://localhost:${server.identity.primaryPort}/data`;
+
+// ExtensionContent.jsm needs to know when it's running from xpcshell,
+// to use the right timeout for content scripts executed at document_idle.
+ExtensionTestUtils.mockAppInfo();
+
+// Test that document_start content scripts don't block script-created
+// parsers.
+add_task(async function test_contentscript_scriptCreated() {
+  let extensionData = {
+    manifest: {
+      content_scripts: [{
+        "matches": ["http://*/*/file_document_write.html"],
+        "js": ["content_script.js"],
+        "run_at": "document_start",
+        "match_about_blank": true,
+        "all_frames": true,
+      }],
+    },
+
+    files: {
+      "content_script.js": function() {
+        if (window === top) {
+          addEventListener("message", msg => {
+            browser.test.assertEq("ok", msg.data, "document.write() succeeded");
+            browser.test.sendMessage("content-script-done");
+          }, {once: true});
+        }
+      },
+    },
+  };
+
+  let extension = ExtensionTestUtils.loadExtension(extensionData);
+
+  await extension.startup();
+
+  let contentPage = await ExtensionTestUtils.loadContentPage(`${BASE_URL}/file_document_write.html`);
+
+  await extension.awaitMessage("content-script-done");
+
+  await contentPage.close();
+
+  await extension.unload();
+});
diff --git toolkit/components/extensions/test/xpcshell/xpcshell-content.ini toolkit/components/extensions/test/xpcshell/xpcshell-content.ini
index e34ec0717691..65814ff5da97 100644
--- toolkit/components/extensions/test/xpcshell/xpcshell-content.ini
+++ toolkit/components/extensions/test/xpcshell/xpcshell-content.ini
@@ -2,4 +2,5 @@
 skip-if = os == "android" || (os == "win" && debug)
 [test_ext_i18n_css.js]
 [test_ext_contentscript.js]
+[test_ext_contentscript_scriptCreated.js]
 [test_ext_contentscript_xrays.js]
