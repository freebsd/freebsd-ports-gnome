commit e530ba4d4394
Author: Thomas Wisniewski <wisniewskit@gmail.com>
Date:   Tue Jul 4 20:59:26 2017 -0400

    Bug 1355576 - Add ability to clear all localStorage with the browsingData API; r=bsilverberg,janv
    
    MozReview-Commit-ID: 4UUqg62yIo9
    
    --HG--
    extra : rebase_source : 9c6154bbe878fc3921d22027fdc90dbdaed05be9
---
 browser/components/extensions/ext-browsingData.js  | 10 +++
 .../extensions/schemas/browsing_data.json          |  1 -
 .../extensions/test/browser/browser-common.ini     |  1 +
 .../browser_ext_browsingData_localStorage.js       | 93 ++++++++++++++++++++++
 .../test/xpcshell/test_ext_browsingData.js         |  4 +-
 dom/storage/LocalStorageManager.cpp                |  3 +-
 dom/storage/StorageObserver.cpp                    | 12 +++
 .../extensions/schemas/browsing_data.json          |  1 -
 8 files changed, 120 insertions(+), 5 deletions(-)

diff --git browser/components/extensions/ext-browsingData.js browser/components/extensions/ext-browsingData.js
index fd59141dd15d..109ec9601487 100644
--- browser/components/extensions/ext-browsingData.js
+++ browser/components/extensions/ext-browsingData.js
@@ -83,6 +83,10 @@ const clearHistory = options => {
   return sanitizer.items.history.clear(makeRange(options));
 };
 
+const clearLocalStorage = async function(options) {
+  Services.obs.notifyObservers(null, "extension:purge-localStorage");
+};
+
 const clearPasswords = async function(options) {
   let loginManager = Services.logins;
   let yieldCounter = 0;
@@ -152,6 +156,9 @@ const doRemoval = (options, dataToRemove, extension) => {
         case "history":
           removalPromises.push(clearHistory(options));
           break;
+        case "localStorage":
+          removalPromises.push(clearLocalStorage(options));
+          break;
         case "passwords":
           removalPromises.push(clearPasswords(options));
           break;
@@ -225,6 +232,9 @@ this.browsingData = class extends ExtensionAPI {
         removeHistory(options) {
           return doRemoval(options, {history: true});
         },
+        removeLocalStorage(options) {
+          return doRemoval(options, {localStorage: true});
+        },
         removePasswords(options) {
           return doRemoval(options, {passwords: true});
         },
diff --git browser/components/extensions/schemas/browsing_data.json browser/components/extensions/schemas/browsing_data.json
index a780f5640c8f..7755714eb898 100644
--- browser/components/extensions/schemas/browsing_data.json
+++ browser/components/extensions/schemas/browsing_data.json
@@ -341,7 +341,6 @@
         "description": "Clears websites' local storage data.",
         "type": "function",
         "async": "callback",
-        "unsupported": true,
         "parameters": [
           {
             "$ref": "RemovalOptions",
diff --git browser/components/extensions/test/browser/browser-common.ini browser/components/extensions/test/browser/browser-common.ini
index 464b8ba18f37..e3f7700f3939 100644
--- browser/components/extensions/test/browser/browser-common.ini
+++ browser/components/extensions/test/browser/browser-common.ini
@@ -46,6 +46,7 @@ skip-if = (os == 'win' && !debug) # bug 1352668
 [browser_ext_browserAction_theme_icons.js]
 [browser_ext_browsingData_formData.js]
 [browser_ext_browsingData_history.js]
+[browser_ext_browsingData_localStorage.js]
 [browser_ext_browsingData_pluginData.js]
 [browser_ext_browsingData_serviceWorkers.js]
 [browser_ext_commands_execute_browser_action.js]
diff --git browser/components/extensions/test/browser/browser_ext_browsingData_localStorage.js browser/components/extensions/test/browser/browser_ext_browsingData_localStorage.js
new file mode 100644
index 000000000000..215f26d1fcb6
--- /dev/null
+++ browser/components/extensions/test/browser/browser_ext_browsingData_localStorage.js
@@ -0,0 +1,93 @@
+/* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set sts=2 sw=2 et tw=80: */
+"use strict";
+
+add_task(async function testLocalStorage() {
+  async function background() {
+    function openTabs() {
+      let promise = new Promise(resolve => {
+        let tabURLs = [
+          "http://example.com/",
+          "http://example.net/",
+        ];
+
+        let tabs;
+        let waitingCount = tabURLs.length;
+
+        let listener = async msg => {
+          if (msg !== "content-script-ready" || --waitingCount) {
+            return;
+          }
+          browser.runtime.onMessage.removeListener(listener);
+          resolve(Promise.all(tabs));
+        };
+
+        browser.runtime.onMessage.addListener(listener);
+
+        tabs = tabURLs.map(url => {
+          return browser.tabs.create({url: url});
+        });
+      });
+
+      return promise;
+    }
+
+    function sendMessageToTabs(tabs, message) {
+      return Promise.all(
+        tabs.map(tab => { return browser.tabs.sendMessage(tab.id, message); }));
+    }
+
+    let tabs = await openTabs();
+
+    await sendMessageToTabs(tabs, "resetLocalStorage");
+    await sendMessageToTabs(tabs, "checkLocalStorageSet");
+    await browser.browsingData.removeLocalStorage({});
+    await sendMessageToTabs(tabs, "checkLocalStorageCleared");
+
+    await sendMessageToTabs(tabs, "resetLocalStorage");
+    await sendMessageToTabs(tabs, "checkLocalStorageSet");
+    await browser.browsingData.remove({}, {localStorage: true});
+    await sendMessageToTabs(tabs, "checkLocalStorageCleared");
+
+    browser.tabs.remove(tabs.map(tab => tab.id));
+
+    browser.test.notifyPass("done");
+  }
+
+  function contentScript() {
+    browser.runtime.onMessage.addListener(msg => {
+      if (msg === "resetLocalStorage") {
+        localStorage.clear();
+        localStorage.setItem("test", "test");
+      } else if (msg === "checkLocalStorageSet") {
+        browser.test.assertEq("test", localStorage.getItem("test"));
+      } else if (msg === "checkLocalStorageCleared") {
+        browser.test.assertEq(null, localStorage.getItem("test"));
+      }
+    });
+    browser.runtime.sendMessage("content-script-ready");
+  }
+
+  let extension = ExtensionTestUtils.loadExtension({
+    background,
+    manifest: {
+      "permissions": ["browsingData"],
+      "content_scripts": [{
+        "matches": [
+          "http://example.com/",
+          "http://example.net/",
+        ],
+        "js": ["content-script.js"],
+        "run_at": "document_start",
+      }],
+    },
+    files: {
+      "content-script.js": contentScript,
+    },
+  });
+
+  await extension.startup();
+  await extension.awaitFinish("done");
+  await extension.unload();
+});
+
diff --git browser/components/extensions/test/xpcshell/test_ext_browsingData.js browser/components/extensions/test/xpcshell/test_ext_browsingData.js
index 0c1c4874ca44..0b8972058e64 100644
--- browser/components/extensions/test/xpcshell/test_ext_browsingData.js
+++ browser/components/extensions/test/xpcshell/test_ext_browsingData.js
@@ -44,7 +44,7 @@ add_task(async function testInvalidArguments() {
 
 add_task(async function testUnimplementedDataType() {
   function background() {
-    browser.browsingData.remove({}, {localStorage: true});
+    browser.browsingData.remove({}, {indexedDB: true});
     browser.test.sendMessage("finished");
   }
 
@@ -61,6 +61,6 @@ add_task(async function testUnimplementedDataType() {
     await extension.unload();
   });
 
-  let warningObserved = messages.find(line => /Firefox does not support dataTypes: localStorage/.test(line));
+  let warningObserved = messages.find(line => /Firefox does not support dataTypes: indexedDB/.test(line));
   ok(warningObserved, "Warning issued when calling remove with an unimplemented dataType.");
 });
diff --git dom/storage/LocalStorageManager.cpp dom/storage/LocalStorageManager.cpp
index a161de2bc596..f366e7874a90 100644
--- dom/storage/LocalStorageManager.cpp
+++ dom/storage/LocalStorageManager.cpp
@@ -386,7 +386,8 @@ LocalStorageManager::Observe(const char* aTopic,
   }
 
   // Clear everything, caches + database
-  if (!strcmp(aTopic, "cookie-cleared")) {
+  if (!strcmp(aTopic, "cookie-cleared") ||
+      !strcmp(aTopic, "extension:purge-localStorage-caches")) {
     ClearCaches(LocalStorageCache::kUnloadComplete, pattern, EmptyCString());
     return NS_OK;
   }
diff --git dom/storage/StorageObserver.cpp dom/storage/StorageObserver.cpp
index e5b010f88c7b..48d484748209 100644
--- dom/storage/StorageObserver.cpp
+++ dom/storage/StorageObserver.cpp
@@ -66,6 +66,7 @@ StorageObserver::Init()
   obs->AddObserver(sSelf, "browser:purge-domain-data", true);
   obs->AddObserver(sSelf, "last-pb-context-exited", true);
   obs->AddObserver(sSelf, "clear-origin-attributes-data", true);
+  obs->AddObserver(sSelf, "extension:purge-localStorage", true);
 
   // Shutdown
   obs->AddObserver(sSelf, "profile-after-change", true);
@@ -270,6 +271,23 @@ StorageObserver::Observe(nsISupports* aSubject,
 
     Notify("session-only-cleared", NS_ConvertUTF8toUTF16(originSuffix),
            originScope);
+
+    return NS_OK;
+  }
+
+  if (!strcmp(aTopic, "extension:purge-localStorage")) {
+    StorageDBChild* storageChild = StorageDBChild::GetOrCreate();
+    if (NS_WARN_IF(!storageChild)) {
+      return NS_ERROR_FAILURE;
+    }
+
+    storageChild->AsyncClearAll();
+
+    if (XRE_IsParentProcess()) {
+      storageChild->SendClearAll();
+    }
+
+    Notify("extension:purge-localStorage-caches");
 
     return NS_OK;
   }
diff --git mobile/android/components/extensions/schemas/browsing_data.json mobile/android/components/extensions/schemas/browsing_data.json
index 483a462d422c..1019c1a23953 100644
--- mobile/android/components/extensions/schemas/browsing_data.json
+++ mobile/android/components/extensions/schemas/browsing_data.json
@@ -345,7 +345,6 @@
         "description": "Clears websites' local storage data.",
         "type": "function",
         "async": "callback",
-        "unsupported": true,
         "parameters": [
           {
             "$ref": "RemovalOptions",
