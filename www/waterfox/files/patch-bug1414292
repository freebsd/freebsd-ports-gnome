commit e66612be968f
Author: Boris Zbarsky <bzbarsky@mit.edu>
Date:   Tue Nov 7 15:36:16 2017 -0500

    Bug 1414292.  Update to HTML spec changes for cross-origin object property enumerability.  r=peterv
    
    Updates to https://github.com/whatwg/html/pull/3186
    
    Includes the changes from https://github.com/w3c/web-platform-tests/pull/8045
    
    MozReview-Commit-ID: 5vEo1QGPufE
---
 js/xpconnect/wrappers/FilteringWrapper.cpp         |  9 ++++---
 .../cross-origin-objects.html.ini                  | 10 -------
 .../cross-origin-objects/cross-origin-objects.html | 31 +++++++++++-----------
 3 files changed, 22 insertions(+), 28 deletions(-)

diff --git js/xpconnect/wrappers/FilteringWrapper.cpp js/xpconnect/wrappers/FilteringWrapper.cpp
index 1e986c734cde..4c9db40cdd5d 100644
--- js/xpconnect/wrappers/FilteringWrapper.cpp
+++ js/xpconnect/wrappers/FilteringWrapper.cpp
@@ -223,9 +223,12 @@ CrossOriginXrayWrapper::getPropertyDescriptor(JSContext* cx,
         // All properties on cross-origin DOM objects are |own|.
         desc.object().set(wrapper);
 
-        // All properties on cross-origin DOM objects are non-enumerable and
-        // "configurable". Any value attributes are read-only.
-        desc.attributesRef() &= ~JSPROP_ENUMERATE;
+        // All properties on cross-origin DOM objects are "configurable". Any
+        // value attributes are read-only.  Indexed properties are enumerable,
+        // but nothing else is.
+        if (!JSID_IS_INT(id)) {
+            desc.attributesRef() &= ~JSPROP_ENUMERATE;
+        }
         desc.attributesRef() &= ~JSPROP_PERMANENT;
         if (!desc.getter() && !desc.setter())
             desc.attributesRef() |= JSPROP_READONLY;
diff --git testing/web-platform/meta/html/browsers/origin/cross-origin-objects/cross-origin-objects.html.ini testing/web-platform/meta/html/browsers/origin/cross-origin-objects/cross-origin-objects.html.ini
deleted file mode 100644
index 6c5e683863e9..000000000000
--- testing/web-platform/meta/html/browsers/origin/cross-origin-objects/cross-origin-objects.html.ini
+++ /dev/null
@@ -1,10 +0,0 @@
-[cross-origin-objects.html]
-  type: testharness
-  [[[GetOwnProperty\]\] - Property descriptors for cross-origin properties should be set up correctly]
-    expected: FAIL
-
-  [Can only enumerate safelisted properties]
-    expected: FAIL
-
-  [[[OwnPropertyKeys\]\] should return all properties from cross-origin objects]
-    expected: FAIL
diff --git testing/web-platform/tests/html/browsers/origin/cross-origin-objects/cross-origin-objects.html testing/web-platform/tests/html/browsers/origin/cross-origin-objects/cross-origin-objects.html
index 06d96b11372d..f79f7ce4ae51 100644
--- testing/web-platform/tests/html/browsers/origin/cross-origin-objects/cross-origin-objects.html
+++ testing/web-platform/tests/html/browsers/origin/cross-origin-objects/cross-origin-objects.html
@@ -184,17 +184,20 @@ addTest(function() {
 }, "[[GetOwnProperty]] - Properties on cross-origin objects should be reported |own|");
 
 function checkPropertyDescriptor(desc, propName, expectWritable) {
-  var isSymbol = (typeof(propName) == "symbol");
+  const isSymbol = typeof(propName) === "symbol";
+  const isArrayIndexPropertyName = !isSymbol && !isNaN(parseInt(propName, 10));
   propName = String(propName);
   assert_true(isObject(desc), "property descriptor for " + propName + " should exist");
   assert_equals(desc.configurable, true, "property descriptor for " + propName + " should be configurable");
-  if (isSymbol) {
-    assert_equals(desc.enumerable, false, "symbol-property descriptor for " + propName + " should not be enumerable");
-    assert_true("value" in desc,
-                "property descriptor for " + propName + " should be a value descriptor");
-    assert_equals(desc.value, undefined,
+  if (!isArrayIndexPropertyName) {
+    assert_equals(desc.enumerable, false, "property descriptor for " + propName + " should not be enumerable");
+    if(isSymbol) {
+      assert_true("value" in desc,
+                  "property descriptor for " + propName + " should be a value descriptor");
+      assert_equals(desc.value, undefined,
                   "symbol-named cross-origin visible prop " + propName +
                   " should come back as undefined");
+    }
   } else {
     assert_equals(desc.enumerable, true, "property descriptor for " + propName + " should be enumerable");
   }
@@ -265,16 +268,15 @@ addTest(function() {
   let i = 0;
   for (var prop in C) {
     i++;
-    assert_true(whitelistedWindowPropNames.includes(prop), prop + " is not safelisted for a cross-origin Window");
+    assert_true(whitelistedWindowIndices.includes(prop), prop + " is not safelisted for a cross-origin Window");
   }
-  assert_equals(i, whitelistedWindowPropNames.length, "Enumerate all safelisted cross-origin Window properties");
+  assert_equals(i, whitelistedWindowIndices.length, "Enumerate all enumerable safelisted cross-origin Window properties");
   i = 0;
   for (var prop in C.location) {
     i++;
-    assert_true(whitelistedLocationPropNames.includes(prop), prop + " is not safelisted for a cross-origin Location");
   }
-  assert_equals(i, whitelistedLocationPropNames.length, "Enumerate all safelisted cross-origin Location properties");
-}, "Can only enumerate safelisted properties");
+  assert_equals(i, 0, "There's nothing to enumerate for cross-origin Location properties");
+}, "Can only enumerate safelisted enumerable properties");
 
 /*
  * [[OwnPropertyKeys]]
@@ -285,14 +287,13 @@ addTest(function() {
                       whitelistedWindowPropNames,
                       "Object.getOwnPropertyNames() gives the right answer for cross-origin Window");
   assert_array_equals(Object.keys(C).sort(),
-                      whitelistedWindowPropNames,
+                      whitelistedWindowIndices,
                       "Object.keys() gives the right answer for cross-origin Window");
   assert_array_equals(Object.getOwnPropertyNames(C.location).sort(),
                       whitelistedLocationPropNames,
                       "Object.getOwnPropertyNames() gives the right answer for cross-origin Location");
-  assert_array_equals(Object.keys(C.location).sort(),
-                      whitelistedLocationPropNames,
-                      "Object.keys() gives the right answer for cross-origin Location");
+  assert_equals(Object.keys(C.location).length, 0,
+                "Object.keys() gives the right answer for cross-origin Location");
 }, "[[OwnPropertyKeys]] should return all properties from cross-origin objects");
 
 addTest(function() {
commit 25f3d350f097
Author: Boris Zbarsky <bzbarsky@mit.edu>
Date:   Tue Nov 7 16:55:29 2017 -0500

    Bug 1414292 followup.  Indexed properties are enumerable on Window per spec, and thus we fix the CLOSED TREE.
    
    MozReview-Commit-ID: 6Q76VqwSiEx
---
 js/xpconnect/tests/mochitest/test_bug862380.html | 21 ++++++++++++++++-----
 1 file changed, 16 insertions(+), 5 deletions(-)

diff --git js/xpconnect/tests/mochitest/test_bug862380.html js/xpconnect/tests/mochitest/test_bug862380.html
index 0d3fb7329358..eb7cd99c3080 100644
--- js/xpconnect/tests/mochitest/test_bug862380.html
+++ js/xpconnect/tests/mochitest/test_bug862380.html
@@ -13,16 +13,27 @@ https://bugzilla.mozilla.org/show_bug.cgi?id=862380
   /** Test for Bug 862380 **/
   SimpleTest.waitForExplicitFinish();
   function go() {
-    checkNotEnumerable($('ifr').contentWindow);
-    checkNotEnumerable($('ifr').contentWindow.location);
+    checkNotEnumerable($('ifr').contentWindow, true);
+    checkNotEnumerable($('ifr').contentWindow.location, false);
     SimpleTest.finish();
   }
 
-  function checkNotEnumerable(obj) {
+function checkNotEnumerable(obj, isWindow) {
     try {
-      is(Object.keys(obj).length, 0, "Object.keys gives empty array");
+      const expectedWindow = ["0"];
+      const expectedLocation = [];
+      const expected = isWindow ? expectedWindow : expectedLocation;
+      is(Object.keys(obj).length, expected.length,
+         "Object.keys gives right array length");
+      var actual = [];
       for (var i in obj)
-        ok(false, "Enumerated something: " + i);
+        actual.push(i);
+      is(actual.length, expected.length,
+         "Enumeration sees the right number of props");
+      actual.sort();
+      expected.sort();
+      for (var i = 0; i < actual.length; ++i)
+        is(actual[i], expected[i], "Arrays should be the same " + i);
     } catch (e) {
       ok(false, "threw: " + e);
     }
