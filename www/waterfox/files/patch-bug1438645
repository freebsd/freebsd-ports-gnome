commit dc9f32108582
Author: Ted Campbell <tcampbell@mozilla.com>
Date:   Thu Feb 15 14:58:00 2018 +0200

    Bug 1438645 - Prevent XDR from reading past its buffer. r=nbp a=lizzard
    While XDR data is supposed to be trusted, we currently run into a
    corruption for some users/use-cases and so make more XDR operations
    fallible instead of crashing.
    
    MozReview-Commit-ID: 9FSLNWh9RxG
    
    --HG--
    extra : source : fb0c12a38e03ad49c40eb64df23885037d26053d
---
 js/src/jsatom.cpp | 18 ++++++++++++----
 js/src/vm/Xdr.cpp |  2 ++
 js/src/vm/Xdr.h   | 62 ++++++++++++++++++++++++++++++++++++-------------------
 3 files changed, 57 insertions(+), 25 deletions(-)

diff --git js/src/jsatom.cpp js/src/jsatom.cpp
index 5d3ed0040dc1..f1d975f6f03d 100644
--- js/src/jsatom.cpp
+++ js/src/jsatom.cpp
@@ -644,15 +644,25 @@ js::XDRAtom(XDRState<mode>* xdr, MutableHandleAtom atomp)
     JSAtom* atom;
     if (latin1) {
         const Latin1Char* chars = nullptr;
-        if (length)
-            chars = reinterpret_cast<const Latin1Char*>(xdr->buf.read(length));
+        if (length) {
+            const uint8_t *ptr;
+            size_t nbyte = length * sizeof(Latin1Char);
+            if (!xdr->peekData(&ptr, nbyte))
+                return false;
+            chars = reinterpret_cast<const Latin1Char*>(ptr);
+        }
         atom = AtomizeChars(cx, chars, length);
     } else {
 #if MOZ_LITTLE_ENDIAN
         /* Directly access the little endian chars in the XDR buffer. */
         const char16_t* chars = nullptr;
-        if (length)
-            chars = reinterpret_cast<const char16_t*>(xdr->buf.read(length * sizeof(char16_t)));
+        if (length) {
+            const uint8_t *ptr;
+            size_t nbyte = length * sizeof(char16_t);
+            if (!xdr->peekData(&ptr, nbyte))
+                return false;
+            chars = reinterpret_cast<const char16_t*>(ptr);
+        }
         atom = AtomizeChars(cx, chars, length);
 #else
         /*
diff --git js/src/vm/Xdr.cpp js/src/vm/Xdr.cpp
index ec184f31e0c7..5847dbbe3453 100644
--- js/src/vm/Xdr.cpp
+++ js/src/vm/Xdr.cpp
@@ -73,6 +73,8 @@ XDRState<mode>::codeChars(char16_t* chars, size_t nchars)
         mozilla::NativeEndian::copyAndSwapToLittleEndian(ptr, chars, nchars);
     } else {
         const uint8_t* ptr = buf.read(nbytes);
+        if (!ptr)
+            return fail(JS::TranscodeResult_Failure_BadDecode);
         mozilla::NativeEndian::copyAndSwapFromLittleEndian(chars, ptr, nchars);
     }
     return true;
diff --git js/src/vm/Xdr.h js/src/vm/Xdr.h
index 0a6cbf01b50f..a60f43c6b531 100644
--- js/src/vm/Xdr.h
+++ js/src/vm/Xdr.h
@@ -61,11 +61,6 @@ class XDRBuffer<XDR_ENCODE> : public XDRBufferBase
         return ptr;
     }
 
-    const char* readCString() {
-        MOZ_CRASH("Should never read in encode mode");
-        return nullptr;
-    }
-
     const uint8_t* read(size_t n) {
         MOZ_CRASH("Should never read in encode mode");
         return nullptr;
@@ -87,19 +82,15 @@ class XDRBuffer<XDR_DECODE> : public XDRBufferBase
       : XDRBufferBase(cx, cursor),
         buffer_(buffer.begin(), buffer.length()) { }
 
-    const char* readCString() {
-        char* ptr = reinterpret_cast<char*>(&buffer_[cursor_]);
-        uint8_t* end = reinterpret_cast<uint8_t*>(strchr(ptr, '\0')) + 1;
-        MOZ_ASSERT(buffer_.begin().get() < end);
-        MOZ_ASSERT(end <= buffer_.end().get());
-        cursor_ = end - buffer_.begin().get();
-        return ptr;
-    }
-
     const uint8_t* read(size_t n) {
         MOZ_ASSERT(cursor_ < buffer_.length());
         uint8_t* ptr = &buffer_[cursor_];
         cursor_ += n;
+
+        // Don't let buggy code read past our buffer
+        if (cursor_ > buffer_.length())
+            return nullptr;
+
         return ptr;
     }
 
@@ -174,7 +165,7 @@ class XDRCoderBase
 template <XDRMode mode>
 class XDRState : public XDRCoderBase
 {
-  public:
+  protected:
     XDRBuffer<mode> buf;
   private:
     JS::TranscodeResult resultCode_;
@@ -220,6 +211,14 @@ class XDRState : public XDRCoderBase
         return false;
     }
 
+    bool peekData(const uint8_t** pptr, size_t length) {
+        const uint8_t* ptr = buf.read(length);
+        if (!ptr)
+            return fail(JS::TranscodeResult_Failure_BadDecode);
+        *pptr = ptr;
+        return true;
+    }
+
     bool codeUint8(uint8_t* n) {
         if (mode == XDR_ENCODE) {
             uint8_t* ptr = buf.write(sizeof(*n));
@@ -227,7 +226,10 @@ class XDRState : public XDRCoderBase
                 return fail(JS::TranscodeResult_Throw);
             *ptr = *n;
         } else {
-            *n = *buf.read(sizeof(*n));
+            const uint8_t* ptr = buf.read(sizeof(*n));
+            if (!ptr)
+                return fail(JS::TranscodeResult_Failure_BadDecode);
+            *n = *ptr;
         }
         return true;
     }
@@ -240,6 +242,8 @@ class XDRState : public XDRCoderBase
             mozilla::LittleEndian::writeUint16(ptr, *n);
         } else {
             const uint8_t* ptr = buf.read(sizeof(*n));
+            if (!ptr)
+                return fail(JS::TranscodeResult_Failure_BadDecode);
             *n = mozilla::LittleEndian::readUint16(ptr);
         }
         return true;
@@ -253,6 +257,8 @@ class XDRState : public XDRCoderBase
             mozilla::LittleEndian::writeUint32(ptr, *n);
         } else {
             const uint8_t* ptr = buf.read(sizeof(*n));
+            if (!ptr)
+                return fail(JS::TranscodeResult_Failure_BadDecode);
             *n = mozilla::LittleEndian::readUint32(ptr);
         }
         return true;
@@ -266,6 +272,8 @@ class XDRState : public XDRCoderBase
             mozilla::LittleEndian::writeUint64(ptr, *n);
         } else {
             const uint8_t* ptr = buf.read(sizeof(*n));
+            if (!ptr)
+                return fail(JS::TranscodeResult_Failure_BadDecode);
             *n = mozilla::LittleEndian::readUint64(ptr);
         }
         return true;
@@ -328,7 +336,10 @@ class XDRState : public XDRCoderBase
                 return fail(JS::TranscodeResult_Throw);
             memcpy(ptr, bytes, len);
         } else {
-            memcpy(bytes, buf.read(len), len);
+            const uint8_t* ptr = buf.read(len);
+            if (!ptr)
+                return fail(JS::TranscodeResult_Failure_BadDecode);
+            memcpy(bytes, ptr, len);
         }
         return true;
     }
@@ -340,14 +351,23 @@ class XDRState : public XDRCoderBase
      * the decoding buffer.
      */
     bool codeCString(const char** sp) {
+        uint64_t len64;
+        if (mode == XDR_ENCODE)
+            len64 = (uint64_t)(strlen(*sp) + 1);
+        if (!codeUint64(&len64))
+            return false;
+        size_t len = (size_t) len64;
+
         if (mode == XDR_ENCODE) {
-            size_t n = strlen(*sp) + 1;
-            uint8_t* ptr = buf.write(n);
+            uint8_t* ptr = buf.write(len);
             if (!ptr)
                 return fail(JS::TranscodeResult_Throw);
-            memcpy(ptr, *sp, n);
+            memcpy(ptr, *sp, len);
         } else {
-            *sp = buf.readCString();
+            const uint8_t* ptr = buf.read(len);
+            if (!ptr || ptr[len] != '\0')
+                return fail(JS::TranscodeResult_Failure_BadDecode);
+            *sp = reinterpret_cast<const char*>(ptr);
         }
         return true;
     }
