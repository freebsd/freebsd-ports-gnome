commit 8b33a0a29e7e
Author: Lee Bousfield <ljbousfield@gmail.com>
Date:   Wed Sep 13 18:28:51 2017 -0600

    Bug 1398539: Inhibit screensaver with XScreenSaverSuspend r=karlt
    
    MozReview-Commit-ID: LhhpaDaPdaO
    
    --HG--
    extra : rebase_source : 6d53031ea8669b15cdf6fad4c55c58624bd54c38
---
 widget/gtk/WakeLockListener.cpp | 91 ++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 90 insertions(+), 1 deletion(-)

diff --git widget/gtk/WakeLockListener.cpp widget/gtk/WakeLockListener.cpp
index 3c6d7fb186a3..93d2c5a16208 100644
--- widget/gtk/WakeLockListener.cpp
+++ widget/gtk/WakeLockListener.cpp
@@ -15,6 +15,10 @@
 #include "mozilla/ipc/DBusMessageRefPtr.h"
 #include "mozilla/ipc/DBusPendingCallRefPtr.h"
 
+#if defined(MOZ_X11)
+#include "prlink.h"
+#endif
+
 #define FREEDESKTOP_SCREENSAVER_TARGET    "org.freedesktop.ScreenSaver"
 #define FREEDESKTOP_SCREENSAVER_OBJECT    "/ScreenSaver"
 #define FREEDESKTOP_SCREENSAVER_INTERFACE "org.freedesktop.ScreenSaver"
@@ -32,6 +36,9 @@ StaticRefPtr<WakeLockListener> WakeLockListener::sSingleton;
 enum DesktopEnvironment {
   FreeDesktop,
   GNOME,
+#if defined(MOZ_X11)
+  XScreenSaver,
+#endif
   Unsupported,
 };
 
@@ -59,6 +66,11 @@ private:
   bool SendGNOMEInhibitMessage();
   bool SendMessage(DBusMessage* aMessage);
 
+#if defined(MOZ_X11)
+  static bool CheckXScreenSaverSupport();
+  static bool InhibitXScreenSaver(bool inhibit);
+#endif
+
   static void ReceiveInhibitReply(DBusPendingCall* aPending, void* aUserData);
   void InhibitFailed();
   void InhibitSucceeded(uint32_t aInhibitRequest);
@@ -143,6 +155,71 @@ WakeLockTopic::SendGNOMEInhibitMessage()
 }
 
 
+#if defined(MOZ_X11)
+
+typedef Bool (*_XScreenSaverQueryExtension_fn)(Display* dpy, int* event_base,
+                                               int* error_base);
+typedef Bool (*_XScreenSaverQueryVersion_fn)(Display* dpy, int* major,
+                                             int* minor);
+typedef void (*_XScreenSaverSuspend_fn)(Display* dpy, Bool suspend);
+
+static PRLibrary* sXssLib = nullptr;
+static _XScreenSaverQueryExtension_fn _XSSQueryExtension = nullptr;
+static _XScreenSaverQueryVersion_fn _XSSQueryVersion = nullptr;
+static _XScreenSaverSuspend_fn _XSSSuspend = nullptr;
+
+/* static */ bool
+WakeLockTopic::CheckXScreenSaverSupport()
+{
+  if (!sXssLib) {
+    sXssLib = PR_LoadLibrary("libXss.so.1");
+    if (!sXssLib) {
+      return false;
+    }
+  }
+
+  _XSSQueryExtension = (_XScreenSaverQueryExtension_fn)
+      PR_FindFunctionSymbol(sXssLib, "XScreenSaverQueryExtension");
+  _XSSQueryVersion = (_XScreenSaverQueryVersion_fn)
+      PR_FindFunctionSymbol(sXssLib, "XScreenSaverQueryVersion");
+  _XSSSuspend = (_XScreenSaverSuspend_fn)
+      PR_FindFunctionSymbol(sXssLib, "XScreenSaverSuspend");
+  if (!_XSSQueryExtension || !_XSSQueryVersion || !_XSSSuspend) {
+    return false;
+  }
+
+  GdkDisplay* gDisplay = gdk_display_get_default();
+  if (!GDK_IS_X11_DISPLAY(gDisplay)) return false;
+  Display* display = GDK_DISPLAY_XDISPLAY(gDisplay);
+
+  int throwaway;
+  if (!_XSSQueryExtension(display, &throwaway, &throwaway)) return false;
+
+  int major, minor;
+  if (!_XSSQueryVersion(display, &major, &minor)) return false;
+  // Needs to be compatible with version 1.1
+  if (major != 1) return false;
+  if (minor < 1) return false;
+
+  return true;
+}
+
+/* static */ bool
+WakeLockTopic::InhibitXScreenSaver(bool inhibit)
+{
+  // Should only be called if CheckXScreenSaverSupport returns true.
+  // There's a couple of safety checks here nonetheless.
+  if (!_XSSSuspend) return false;
+  GdkDisplay* gDisplay = gdk_display_get_default();
+  if (!GDK_IS_X11_DISPLAY(gDisplay)) return false;
+  Display* display = GDK_DISPLAY_XDISPLAY(gDisplay);
+  _XSSSuspend(display, inhibit);
+  return true;
+}
+
+#endif
+
+
 bool
 WakeLockTopic::SendInhibit()
 {
@@ -156,6 +233,10 @@ WakeLockTopic::SendInhibit()
   case GNOME:
     sendOk = SendGNOMEInhibitMessage();
     break;
+#if defined(MOZ_X11)
+  case XScreenSaver:
+    return InhibitXScreenSaver(true);
+#endif
   case Unsupported:
     return false;
   }
@@ -185,6 +266,11 @@ WakeLockTopic::SendUninhibit()
                                    SESSION_MANAGER_INTERFACE,
                                    "Uninhibit"));
   }
+#if defined(MOZ_X11)
+  else if (mDesktopEnvironment == XScreenSaver) {
+    return InhibitXScreenSaver(false);
+  }
+#endif
 
   if (!message) {
     return false;
@@ -249,8 +335,11 @@ WakeLockTopic::InhibitFailed()
 
   if (mDesktopEnvironment == FreeDesktop) {
     mDesktopEnvironment = GNOME;
+#if defined(MOZ_X11)
+  } else if (mDesktopEnvironment == GNOME && CheckXScreenSaverSupport()) {
+    mDesktopEnvironment = XScreenSaver;
+#endif
   } else {
-    NS_ASSERTION(mDesktopEnvironment == GNOME, "Unknown desktop environment");
     mDesktopEnvironment = Unsupported;
     mShouldInhibit = false;
   }
