commit cd48fc1a4518
Author: Jon Coppeard <jcoppeard@mozilla.com>
Date:   Fri May 18 10:29:00 2018 +0100

    Bug 1461448 - Add gray marking phase to delayed marking phase. r=sfink, a=RyanVM
    
    --HG--
    extra : source : ff105a4cff4eb85a9e50a4ccf8144069412521e5
---
 js/src/gc/GenerateStatsPhases.py        |  6 +++--
 js/src/jit-test/tests/gc/bug-1461448.js | 40 +++++++++++++++++++++++++++++++++
 2 files changed, 44 insertions(+), 2 deletions(-)

diff --git js/src/gc/GenerateStatsPhases.py js/src/gc/GenerateStatsPhases.py
index ece873dc05004..2daf83555e33b 100644
--- js/src/gc/GenerateStatsPhases.py
+++ js/src/gc/GenerateStatsPhases.py
@@ -88,12 +88,14 @@ PhaseKindGraphRoots = [
         PhaseKind("PURGE", "Purge", 5),
         PhaseKind("PURGE_SHAPE_TABLES", "Purge ShapeTables", 60),
         JoinParallelTasksPhaseKind
-        ]),
+    ]),
     PhaseKind("MARK", "Mark", 6, [
         MarkRootsPhaseKind,
         UnmarkGrayPhaseKind,
-        PhaseKind("MARK_DELAYED", "Mark Delayed", 8)
+        PhaseKind("MARK_DELAYED", "Mark Delayed", 8, [
+            UnmarkGrayPhaseKind,
         ]),
+    ]),
     PhaseKind("SWEEP", "Sweep", 9, [
         PhaseKind("SWEEP_MARK", "Mark During Sweeping", 10, [
             UnmarkGrayPhaseKind,
diff --git js/src/jit-test/tests/gc/bug-1461448.js js/src/jit-test/tests/gc/bug-1461448.js
new file mode 100644
index 0000000000000..3b9e69df89101
--- /dev/null
+++ js/src/jit-test/tests/gc/bug-1461448.js
@@ -0,0 +1,40 @@
+if (helperThreadCount() === 0)
+    quit();
+
+gczeal(0);
+
+let lfPreamble = `
+  var lfOffThreadGlobal = newGlobal();
+  for (lfLocal in this)
+    try {} catch(lfVare5) {}
+`;
+evaluate(lfPreamble);
+evaluate(`
+  var g = newGlobal();
+  var dbg = new Debugger;
+  var gw = dbg.addDebuggee(g);
+  for (lfLocal in this)
+    if (!(lfLocal in lfOffThreadGlobal))
+      try {
+        lfOffThreadGlobal[lfLocal] = this[lfLocal];
+      } catch(lfVare5) {}
+  var g = newGlobal();
+  var gw = dbg.addDebuggee(g);
+`);
+lfOffThreadGlobal.offThreadCompileScript(`
+  gcparam("markStackLimit", 1);
+  grayRoot()[0] = "foo";
+`);
+lfOffThreadGlobal.runOffThreadScript();
+eval(`
+  var lfOffThreadGlobal = newGlobal();
+  try { evaluate(\`
+    gczeal(18, 1);
+    grayRoot()[0] = "foo";
+    let inst = new WebAssembly.Instance(new WebAssembly.Module(wasmTextToBinary(
+    \\\`(module
+       (memory (export "memory") 1 1)
+     )\\\`
+    )));
+\`); } catch(exc) {}
+`);
