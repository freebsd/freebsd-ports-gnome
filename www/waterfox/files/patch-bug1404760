commit a73710615fe2
Author: Lars T Hansen <lhansen@mozilla.com>
Date:   Mon Oct 2 10:45:26 2017 +0200

    Bug 1404760 - wasm baseline, disable branch optimization for int64 on x86 to avoid register starvation. r=bbouvier, a=ritu
    
    --HG--
    extra : source : c80e87f3242679c9e9548592f27173871824b681
    extra : intermediate-source : 12d671fcc1f1c25898ebb0723e1eb0b20b5b4838
---
 .../jit-test/tests/wasm/regress/baseline-i64-opt-cmp.js  | 16 ++++++++++++++++
 js/src/wasm/WasmBaselineCompile.cpp                      | 14 ++++++++------
 2 files changed, 24 insertions(+), 6 deletions(-)

diff --git js/src/jit-test/tests/wasm/regress/baseline-i64-opt-cmp.js js/src/jit-test/tests/wasm/regress/baseline-i64-opt-cmp.js
new file mode 100644
index 000000000000..aad892558a15
--- /dev/null
+++ js/src/jit-test/tests/wasm/regress/baseline-i64-opt-cmp.js
@@ -0,0 +1,16 @@
+// Bug 1404760: Optimized compare-and-branch with a preserved value would fail
+// the baseline compiler on x86 debug builds (and would just generate bad code
+// on non-debug builds) because of register starvation.
+
+wasmEvalText(
+    `(module
+      (func $run (param i64) (param i64) (result i64)
+        block i64
+	  i64.const 1
+          (i64.lt_s (get_local 0) (get_local 1))
+	  br_if 0
+	  drop
+          i64.const 2
+        end)
+      (export "run" $run))`
+);
diff --git js/src/wasm/WasmBaselineCompile.cpp js/src/wasm/WasmBaselineCompile.cpp
index bf83cbb3f818..50de676de678 100644
--- js/src/wasm/WasmBaselineCompile.cpp
+++ js/src/wasm/WasmBaselineCompile.cpp
@@ -5212,16 +5212,18 @@ BaseCompiler::sniffConditionalControlCmp(Cond compareOp, ValType operandType)
 {
     MOZ_ASSERT(latentOp_ == LatentOp::None, "Latent comparison state not properly reset");
 
+#ifdef JS_CODEGEN_X86
+    // On x86, latent i64 binary comparisons use too many registers: the
+    // reserved join register and the lhs and rhs operands require six, but we
+    // only have five.
+    if (operandType == ValType::I64)
+        return false;
+#endif
+
     OpBytes op;
     iter_.peekOp(&op);
     switch (op.b0) {
       case uint16_t(Op::Select):
-#ifdef JS_CODEGEN_X86
-        // On x86, with only 5 available registers, a latent i64 binary
-        // comparison takes 4 leaving only 1 which is not enough for select.
-        if (operandType == ValType::I64)
-            return false;
-#endif
         MOZ_FALLTHROUGH;
       case uint16_t(Op::BrIf):
       case uint16_t(Op::If):
