commit 95d5501cd96b
Author: Robert Longson <longsonr@gmail.com>
Date:   Tue Oct 10 07:58:34 2017 +0100

    Bug 1398806 - GetCtx and GetNearestViewport should return the nearest svg or symbol element which is now an SVGViewportElement rather than only returning the nearest svg element because a symbol establishes a viewport too. r=dholbert, a=ritu
    
    --HG--
    extra : source : 813d4e250712d296eb4b11b0b89e10ed6a94e3d4
---
 dom/svg/SVGContentUtils.cpp                   | 12 ++++++----
 dom/svg/SVGContentUtils.h                     |  5 ++--
 dom/svg/SVGLength.cpp                         |  2 +-
 dom/svg/SVGMarkerElement.cpp                  |  2 +-
 dom/svg/SVGMarkerElement.h                    |  4 ++--
 dom/svg/SVGSVGElement.h                       |  9 -------
 dom/svg/SVGViewportElement.h                  |  9 +++++++
 dom/svg/nsSVGElement.cpp                      | 34 +++++++++++++--------------
 dom/svg/nsSVGElement.h                        |  3 ++-
 layout/base/nsLayoutUtils.cpp                 |  4 ++--
 layout/reftests/svg/reftest.list              |  1 +
 layout/reftests/svg/viewBox-and-symbol-01.svg | 14 +++++++++++
 layout/svg/nsCSSClipPathInstance.cpp          |  1 -
 layout/svg/nsSVGImageFrame.cpp                |  1 -
 layout/svg/nsSVGImageFrame.h                  |  1 -
 layout/svg/nsSVGMarkerFrame.cpp               |  4 ++--
 layout/svg/nsSVGMarkerFrame.h                 |  4 ++--
 layout/svg/nsSVGPatternFrame.cpp              |  2 +-
 layout/svg/nsSVGUtils.cpp                     |  6 ++---
 19 files changed, 68 insertions(+), 50 deletions(-)

diff --git dom/svg/SVGContentUtils.cpp dom/svg/SVGContentUtils.cpp
index 0f744ffd8dd1..a6bf6245e95e 100644
--- dom/svg/SVGContentUtils.cpp
+++ dom/svg/SVGContentUtils.cpp
@@ -374,8 +374,8 @@ SVGContentUtils::EstablishesViewport(nsIContent *aContent)
                                                   nsGkAtoms::symbol);
 }
 
-nsSVGElement*
-SVGContentUtils::GetNearestViewportElement(nsIContent *aContent)
+SVGViewportElement*
+SVGContentUtils::GetNearestViewportElement(const nsIContent *aContent)
 {
   nsIContent *element = aContent->GetFlattenedTreeParent();
 
@@ -384,7 +384,11 @@ SVGContentUtils::GetNearestViewportElement(nsIContent *aContent)
       if (element->IsSVGElement(nsGkAtoms::foreignObject)) {
         return nullptr;
       }
-      return static_cast<nsSVGElement*>(element);
+      MOZ_ASSERT(element->IsAnyOfSVGElements(nsGkAtoms::svg,
+                                             nsGkAtoms::symbol),
+                 "upcoming static_cast is only valid for "
+                 "SVGViewportElement subclasses");
+      return static_cast<SVGViewportElement*>(element);
     }
     element = element->GetFlattenedTreeParent();
   }
@@ -828,7 +832,7 @@ SVGContentUtils::CoordToFloat(nsSVGElement *aContent,
     return nsPresContext::AppUnitsToFloatCSSPixels(aCoord.GetCoordValue());
 
   case eStyleUnit_Percent: {
-    SVGSVGElement* ctx = aContent->GetCtx();
+    SVGViewportElement* ctx = aContent->GetCtx();
     return ctx ? aCoord.GetPercentValue() * ctx->GetLength(SVGContentUtils::XY) : 0.0f;
   }
   default:
diff --git dom/svg/SVGContentUtils.h dom/svg/SVGContentUtils.h
index 36c74f47d75a..8ec309daf6f8 100644
--- dom/svg/SVGContentUtils.h
+++ dom/svg/SVGContentUtils.h
@@ -32,6 +32,7 @@ class SVGPreserveAspectRatio;
 namespace dom {
 class Element;
 class SVGSVGElement;
+class SVGViewportElement;
 } // namespace dom
 
 } // namespace mozilla
@@ -238,8 +239,8 @@ public:
    */
   static bool EstablishesViewport(nsIContent *aContent);
 
-  static nsSVGElement*
-  GetNearestViewportElement(nsIContent *aContent);
+  static mozilla::dom::SVGViewportElement*
+  GetNearestViewportElement(const nsIContent *aContent);
 
   /* enum for specifying coordinate direction for ObjectSpace/UserSpace */
   enum ctxDirection { X, Y, XY };
diff --git dom/svg/SVGLength.cpp dom/svg/SVGLength.cpp
index 6c13e2e8d1a0..cecbbc8f5b40 100644
--- dom/svg/SVGLength.cpp
+++ dom/svg/SVGLength.cpp
@@ -177,7 +177,7 @@ SVGLength::GetUserUnitsPerUnit(const nsSVGElement *aElement, uint8_t aAxis) cons
 SVGLength::GetUserUnitsPerPercent(const nsSVGElement *aElement, uint8_t aAxis)
 {
   if (aElement) {
-    dom::SVGSVGElement *viewportElement = aElement->GetCtx();
+    dom::SVGViewportElement *viewportElement = aElement->GetCtx();
     if (viewportElement) {
       return std::max(viewportElement->GetLength(aAxis) / 100.0f, 0.0f);
     }
diff --git dom/svg/SVGMarkerElement.cpp dom/svg/SVGMarkerElement.cpp
index 9b0b2fcfab1e..c4cf29ae274f 100644
--- dom/svg/SVGMarkerElement.cpp
+++ dom/svg/SVGMarkerElement.cpp
@@ -250,7 +250,7 @@ SVGMarkerElement::UnsetAttr(int32_t aNamespaceID, nsIAtom* aName,
 // nsSVGElement methods
 
 void
-SVGMarkerElement::SetParentCoordCtxProvider(SVGSVGElement *aContext)
+SVGMarkerElement::SetParentCoordCtxProvider(SVGViewportElement *aContext)
 {
   mCoordCtx = aContext;
   mViewBoxToViewportTransform = nullptr;
diff --git dom/svg/SVGMarkerElement.h dom/svg/SVGMarkerElement.h
index 5d32de840b7a..ae08885c646e 100644
--- dom/svg/SVGMarkerElement.h
+++ dom/svg/SVGMarkerElement.h
@@ -153,7 +153,7 @@ protected:
                                 const nsAString& aValue,
                                 nsAttrValue& aResult) override;
 
-  void SetParentCoordCtxProvider(SVGSVGElement *aContext);
+  void SetParentCoordCtxProvider(SVGViewportElement *aContext);
 
   virtual LengthAttributesInfo GetLengthInfo() override;
   virtual AngleAttributesInfo GetAngleInfo() override;
@@ -180,7 +180,7 @@ protected:
   // derived properties (from 'orient') handled separately
   nsSVGOrientType                        mOrientType;
 
-  SVGSVGElement                         *mCoordCtx;
+  SVGViewportElement*                    mCoordCtx;
   nsAutoPtr<gfx::Matrix>                 mViewBoxToViewportTransform;
 };
 
diff --git dom/svg/SVGSVGElement.h dom/svg/SVGSVGElement.h
index fc3d7f3b55c5..431d70da2bef 100644
--- dom/svg/SVGSVGElement.h
+++ dom/svg/SVGSVGElement.h
@@ -182,15 +182,6 @@ public:
   // SVG-as-an-image documents.)
   virtual void FlushImageTransformInvalidation();
 
-  svgFloatSize GetViewportSize() const {
-    return svgFloatSize(mViewportWidth, mViewportHeight);
-  }
-
-  void SetViewportSize(const svgFloatSize& aSize) {
-    mViewportWidth  = aSize.width;
-    mViewportHeight = aSize.height;
-  }
-
 private:
   // SVGViewportElement methods:
 
diff --git dom/svg/SVGViewportElement.h dom/svg/SVGViewportElement.h
index fbc866e6a8d2..202797785131 100644
--- dom/svg/SVGViewportElement.h
+++ dom/svg/SVGViewportElement.h
@@ -127,6 +127,15 @@ public:
 
   gfx::Matrix GetViewBoxTransform() const;
 
+  svgFloatSize GetViewportSize() const {
+    return svgFloatSize(mViewportWidth, mViewportHeight);
+  }
+
+  void SetViewportSize(const svgFloatSize& aSize) {
+    mViewportWidth  = aSize.width;
+    mViewportHeight = aSize.height;
+  }
+
   // WebIDL
   already_AddRefed<SVGAnimatedRect> ViewBox();
   already_AddRefed<DOMSVGAnimatedPreserveAspectRatio> PreserveAspectRatio();
diff --git dom/svg/nsSVGElement.cpp dom/svg/nsSVGElement.cpp
index 8757150c5925..a8aaa2fb5274 100644
--- dom/svg/nsSVGElement.cpp
+++ dom/svg/nsSVGElement.cpp
@@ -1107,7 +1107,20 @@ nsSVGElement::GetOwnerSVGElement(nsIDOMSVGElement * *aOwnerSVGElement)
 SVGSVGElement*
 nsSVGElement::GetOwnerSVGElement()
 {
-  return GetCtx(); // this may return nullptr
+  nsIContent* ancestor = GetFlattenedTreeParent();
+
+  while (ancestor && ancestor->IsSVGElement()) {
+    if (ancestor->IsSVGElement(nsGkAtoms::foreignObject)) {
+      return nullptr;
+    }
+    if (ancestor->IsSVGElement(nsGkAtoms::svg)) {
+      return static_cast<SVGSVGElement*>(ancestor);
+    }
+    ancestor = ancestor->GetFlattenedTreeParent();
+  }
+
+  // we don't have an ancestor <svg> element...
+  return nullptr;
 }
 
 NS_IMETHODIMP
@@ -1543,23 +1556,10 @@ nsIAtom* nsSVGElement::GetEventNameForAttr(nsIAtom* aAttr)
   return aAttr;
 }
 
-SVGSVGElement *
+SVGViewportElement *
 nsSVGElement::GetCtx() const
 {
-  nsIContent* ancestor = GetFlattenedTreeParent();
-
-  while (ancestor && ancestor->IsSVGElement()) {
-    if (ancestor->IsSVGElement(nsGkAtoms::foreignObject)) {
-      return nullptr;
-    }
-    if (ancestor->IsSVGElement(nsGkAtoms::svg)) {
-      return static_cast<SVGSVGElement*>(ancestor);
-    }
-    ancestor = ancestor->GetFlattenedTreeParent();
-  }
-
-  // we don't have an ancestor <svg> element...
-  return nullptr;
+  return SVGContentUtils::GetNearestViewportElement(this);
 }
 
 /* virtual */ gfxMatrix
@@ -1658,7 +1658,7 @@ nsSVGElement::GetAnimatedLengthValues(float *aFirst, ...)
   NS_ASSERTION(info.mLengthCount > 0,
                "GetAnimatedLengthValues on element with no length attribs");
 
-  SVGSVGElement *ctx = nullptr;
+  SVGViewportElement *ctx = nullptr;
 
   float *f = aFirst;
   uint32_t i = 0;
diff --git dom/svg/nsSVGElement.h dom/svg/nsSVGElement.h
index 28c46188d4e4..955a327561d3 100644
--- dom/svg/nsSVGElement.h
+++ dom/svg/nsSVGElement.h
@@ -44,6 +44,7 @@ class DeclarationBlock;
 
 namespace dom {
 class SVGSVGElement;
+class SVGViewportElement;
 
 static const unsigned short SVG_UNIT_TYPE_UNKNOWN           = 0;
 static const unsigned short SVG_UNIT_TYPE_USERSPACEONUSE    = 1;
@@ -145,7 +146,7 @@ public:
   // Gets the element that establishes the rectangular viewport against which
   // we should resolve percentage lengths (our "coordinate context"). Returns
   // nullptr for outer <svg> or SVG without an <svg> parent (invalid SVG).
-  mozilla::dom::SVGSVGElement* GetCtx() const;
+  mozilla::dom::SVGViewportElement* GetCtx() const;
 
   /**
    * Returns aMatrix pre-multiplied by (explicit or implicit) transforms that
diff --git layout/base/nsLayoutUtils.cpp layout/base/nsLayoutUtils.cpp
index f5ca2719e333..7f3f5354befc 100644
--- layout/base/nsLayoutUtils.cpp
+++ layout/base/nsLayoutUtils.cpp
@@ -120,7 +120,7 @@
 #include "mozilla/StyleSetHandle.h"
 #include "mozilla/StyleSetHandleInlines.h"
 #include "RegionBuilder.h"
-#include "SVGSVGElement.h"
+#include "SVGViewportElement.h"
 #include "DisplayItemClip.h"
 #include "mozilla/layers/WebRenderLayerManager.h"
 #include "prenv.h"
@@ -9479,7 +9479,7 @@ ComputeSVGReferenceRect(nsIFrame* aFrame,
     case StyleGeometryBox::ViewBox: {
       nsIContent* content = aFrame->GetContent();
       nsSVGElement* element = static_cast<nsSVGElement*>(content);
-      SVGSVGElement* svgElement = element->GetCtx();
+      SVGViewportElement* svgElement = element->GetCtx();
       MOZ_ASSERT(svgElement);
 
       if (svgElement && svgElement->HasViewBoxRect()) {
diff --git layout/reftests/svg/reftest.list layout/reftests/svg/reftest.list
index 2d3981f0b65e..0b96144724bb 100644
--- layout/reftests/svg/reftest.list
+++ layout/reftests/svg/reftest.list
@@ -532,6 +532,7 @@ fuzzy-if(skiaContent,1,100) == tspan-xy-anchor-end-01.svg tspan-xy-anchor-end-re
 == viewBox-and-pattern-02.svg pass.svg
 == viewBox-and-pattern-03.svg pass.svg
 == viewBox-and-pattern-04.svg pass.svg
+== viewBox-and-symbol-01.svg pass.svg
 == viewBox-invalid-01.svg pass.svg
 == viewBox-invalid-02.svg pass.svg
 == viewBox-valid-01.svg pass.svg
diff --git layout/reftests/svg/viewBox-and-symbol-01.svg layout/reftests/svg/viewBox-and-symbol-01.svg
new file mode 100644
index 000000000000..5c8ebf7bc3ea
--- /dev/null
+++ layout/reftests/svg/viewBox-and-symbol-01.svg
@@ -0,0 +1,14 @@
+<svg xmlns="http://www.w3.org/2000/svg">
+  <defs>
+    <symbol id="mySymbol" viewBox="0 0 20 20">
+      <rect fill="lime" x="50%" height="20px" width="3%"/>
+    </symbol>
+  </defs>
+  <rect width="100%" height="100%" fill="lime"/>
+  <svg viewBox="0 0 20 20">
+    <rect fill="red" x="50%" height="20px" width="2%"/>
+  </svg>
+  <svg>
+    <use href="#mySymbol"/>
+  </svg>
+</svg>
diff --git layout/svg/nsCSSClipPathInstance.cpp layout/svg/nsCSSClipPathInstance.cpp
index 09d3530c4ef0..0c25f7a21bb8 100644
--- layout/svg/nsCSSClipPathInstance.cpp
+++ layout/svg/nsCSSClipPathInstance.cpp
@@ -9,7 +9,6 @@
 #include "gfx2DGlue.h"
 #include "gfxContext.h"
 #include "gfxPlatform.h"
-#include "mozilla/dom/SVGSVGElement.h"
 #include "mozilla/gfx/2D.h"
 #include "mozilla/gfx/PathHelpers.h"
 #include "mozilla/ShapeUtils.h"
diff --git layout/svg/nsSVGImageFrame.cpp layout/svg/nsSVGImageFrame.cpp
index 074415854667..21834954721d 100644
--- layout/svg/nsSVGImageFrame.cpp
+++ layout/svg/nsSVGImageFrame.cpp
@@ -16,7 +16,6 @@
 #include "nsLayoutUtils.h"
 #include "imgINotificationObserver.h"
 #include "nsSVGEffects.h"
-#include "mozilla/dom/SVGSVGElement.h"
 #include "nsSVGUtils.h"
 #include "SVGContentUtils.h"
 #include "SVGGeometryFrame.h"
diff --git layout/svg/nsSVGImageFrame.h layout/svg/nsSVGImageFrame.h
index b2c90fd6402d..fe0ac33ac02a 100644
--- layout/svg/nsSVGImageFrame.h
+++ layout/svg/nsSVGImageFrame.h
@@ -17,7 +17,6 @@
 #include "nsLayoutUtils.h"
 #include "imgINotificationObserver.h"
 #include "nsSVGEffects.h"
-#include "mozilla/dom/SVGSVGElement.h"
 #include "nsSVGUtils.h"
 #include "SVGContentUtils.h"
 #include "SVGGeometryFrame.h"
diff --git layout/svg/nsSVGMarkerFrame.cpp layout/svg/nsSVGMarkerFrame.cpp
index dbeb02ea5b2d..365a0aa70a26 100644
--- layout/svg/nsSVGMarkerFrame.cpp
+++ layout/svg/nsSVGMarkerFrame.cpp
@@ -194,7 +194,7 @@ nsSVGMarkerFrame::GetMarkBBoxContribution(const Matrix& aToBBoxUserspace,
 }
 
 void
-nsSVGMarkerFrame::SetParentCoordCtxProvider(SVGSVGElement *aContext)
+nsSVGMarkerFrame::SetParentCoordCtxProvider(SVGViewportElement *aContext)
 {
   SVGMarkerElement *marker = static_cast<SVGMarkerElement*>(mContent);
   marker->SetParentCoordCtxProvider(aContext);
@@ -219,7 +219,7 @@ nsSVGMarkerFrame::AutoMarkerReferencer::AutoMarkerReferencer(
   mFrame->mInUse = true;
   mFrame->mMarkedFrame = aMarkedFrame;
 
-  SVGSVGElement *ctx =
+  SVGViewportElement *ctx =
     static_cast<nsSVGElement*>(aMarkedFrame->GetContent())->GetCtx();
   mFrame->SetParentCoordCtxProvider(ctx);
 }
diff --git layout/svg/nsSVGMarkerFrame.h layout/svg/nsSVGMarkerFrame.h
index 95415e6dcc21..03099eab9324 100644
--- layout/svg/nsSVGMarkerFrame.h
+++ layout/svg/nsSVGMarkerFrame.h
@@ -20,7 +20,7 @@ class gfxContext;
 namespace mozilla {
 class SVGGeometryFrame;
 namespace dom {
-class SVGSVGElement;
+class SVGViewportElement;
 } // namespace dom
 } // namespace mozilla
 
@@ -119,7 +119,7 @@ private:
   };
 
   // nsSVGMarkerFrame methods:
-  void SetParentCoordCtxProvider(mozilla::dom::SVGSVGElement *aContext);
+  void SetParentCoordCtxProvider(mozilla::dom::SVGViewportElement *aContext);
 
   // recursion prevention flag
   bool mInUse;
diff --git layout/svg/nsSVGPatternFrame.cpp layout/svg/nsSVGPatternFrame.cpp
index 488ac2f5c783..5078fb1b5a31 100644
--- layout/svg/nsSVGPatternFrame.cpp
+++ layout/svg/nsSVGPatternFrame.cpp
@@ -660,7 +660,7 @@ nsSVGPatternFrame::ConstructCTM(const nsSVGViewBox& aViewBox,
                                 const Matrix &callerCTM,
                                 nsIFrame *aTarget)
 {
-  SVGSVGElement *ctx = nullptr;
+  SVGViewportElement *ctx = nullptr;
   nsIContent* targetContent = aTarget->GetContent();
   gfxFloat scaleX, scaleY;
 
diff --git layout/svg/nsSVGUtils.cpp layout/svg/nsSVGUtils.cpp
index d53a3ede0be7..f21c23491285 100644
--- layout/svg/nsSVGUtils.cpp
+++ layout/svg/nsSVGUtils.cpp
@@ -49,7 +49,7 @@
 #include "SVGGeometryElement.h"
 #include "SVGGeometryFrame.h"
 #include "nsSVGPaintServerFrame.h"
-#include "mozilla/dom/SVGSVGElement.h"
+#include "mozilla/dom/SVGViewportElement.h"
 #include "nsTextFrame.h"
 #include "SVGContentUtils.h"
 #include "SVGTextFrame.h"
@@ -290,7 +290,7 @@ nsSVGUtils::GetContextSize(const nsIFrame* aFrame)
   MOZ_ASSERT(aFrame->GetContent()->IsSVGElement(), "bad cast");
   const nsSVGElement* element = static_cast<nsSVGElement*>(aFrame->GetContent());
 
-  SVGSVGElement* ctx = element->GetCtx();
+  SVGViewportElement* ctx = element->GetCtx();
   if (ctx) {
     size.width = ctx->GetLength(SVGContentUtils::X);
     size.height = ctx->GetLength(SVGContentUtils::Y);
@@ -323,7 +323,7 @@ nsSVGUtils::ObjectSpace(const gfxRect &aRect, const nsSVGLength2 *aLength)
     // Multiply first to avoid precision errors:
     return axis * aLength->GetAnimValInSpecifiedUnits() / 100;
   }
-  return aLength->GetAnimValue(static_cast<SVGSVGElement*>(nullptr)) * axis;
+  return aLength->GetAnimValue(static_cast<SVGViewportElement*>(nullptr)) * axis;
 }
 
 float
