commit 71daba14a2c4
Author: Alexander Surkov <surkov.alexander@gmail.com>
Date:   Tue Oct 3 10:58:27 2017 -0400

    Bug 1402951 - No show events for content on document load complete. r=aklotz, r=yzen, a=ritu
    
    --HG--
    extra : source : ffc4c63976921cbfec03b26ff48541c2f414d2e3
---
 accessible/generic/DocAccessible.cpp                     | 14 ++++++++------
 accessible/ipc/DocAccessibleChildBase.cpp                | 15 ++++++++++++++-
 accessible/ipc/DocAccessibleChildBase.h                  |  5 +++++
 accessible/ipc/DocAccessibleParent.cpp                   |  5 +++++
 accessible/ipc/other/PDocAccessible.ipdl                 |  1 +
 accessible/ipc/win/DocAccessibleChild.h                  |  3 ++-
 accessible/ipc/win/PDocAccessible.ipdl                   |  1 +
 accessible/tests/mochitest/treeupdate/test_ariaowns.html |  5 ++---
 8 files changed, 38 insertions(+), 11 deletions(-)

diff --git accessible/generic/DocAccessible.cpp accessible/generic/DocAccessible.cpp
index 60b160b21a78..fa6f3c6a70d5 100644
--- accessible/generic/DocAccessible.cpp
+++ accessible/generic/DocAccessible.cpp
@@ -1536,13 +1536,15 @@ DocAccessible::DoInitialUpdate()
     ParentDocument()->FireDelayedEvent(reorderEvent);
   }
 
-  TreeMutation mt(this);
-  uint32_t childCount = ChildCount();
-  for (uint32_t i = 0; i < childCount; i++) {
-    Accessible* child = GetChildAt(i);
-    mt.AfterInsertion(child);
+  if (IPCAccessibilityActive()) {
+    DocAccessibleChild* ipcDoc = IPCDoc();
+    MOZ_ASSERT(ipcDoc);
+    if (ipcDoc) {
+      for (auto idx = 0U; idx < mChildren.Length(); idx++) {
+        ipcDoc->InsertIntoIpcTree(this, mChildren.ElementAt(idx), idx);
+      }
+    }
   }
-  mt.Done();
 }
 
 void
diff --git accessible/ipc/DocAccessibleChildBase.cpp accessible/ipc/DocAccessibleChildBase.cpp
index 6a0ad9b7dbc6..19a858aa6d9b 100644
--- accessible/ipc/DocAccessibleChildBase.cpp
+++ accessible/ipc/DocAccessibleChildBase.cpp
@@ -80,6 +80,19 @@ DocAccessibleChildBase::SerializeTree(Accessible* aRoot,
   }
 }
 
+void
+DocAccessibleChildBase::InsertIntoIpcTree(Accessible* aParent,
+                                          Accessible* aChild,
+                                          uint32_t aIdxInParent)
+{
+  uint64_t parentID = aParent->IsDoc() ?
+    0 : reinterpret_cast<uint64_t>(aParent->UniqueID());
+  nsTArray<AccessibleData> shownTree;
+  ShowEventData data(parentID, aIdxInParent, shownTree, true);
+  SerializeTree(aChild, data.NewTree());
+  MaybeSendShowEvent(data, false);
+}
+
 void
 DocAccessibleChildBase::ShowEvent(AccShowEvent* aShowEvent)
 {
@@ -87,7 +100,7 @@ DocAccessibleChildBase::ShowEvent(AccShowEvent* aShowEvent)
   uint64_t parentID = parent->IsDoc() ? 0 : reinterpret_cast<uint64_t>(parent->UniqueID());
   uint32_t idxInParent = aShowEvent->GetAccessible()->IndexInParent();
   nsTArray<AccessibleData> shownTree;
-  ShowEventData data(parentID, idxInParent, shownTree);
+  ShowEventData data(parentID, idxInParent, shownTree, false);
   SerializeTree(aShowEvent->GetAccessible(), data.NewTree());
   MaybeSendShowEvent(data, aShowEvent->IsFromUserInput());
 }
diff --git accessible/ipc/DocAccessibleChildBase.h accessible/ipc/DocAccessibleChildBase.h
index b8a8bfde1d0c..13146e5d44e2 100644
--- accessible/ipc/DocAccessibleChildBase.h
+++ accessible/ipc/DocAccessibleChildBase.h
@@ -45,6 +45,11 @@ public:
     SendShutdown();
   }
 
+  /**
+   * Serializes a shown tree and sends it to the chrome process.
+   */
+  void InsertIntoIpcTree(Accessible* aParent,
+                         Accessible* aChild, uint32_t aIdxInParent);
   void ShowEvent(AccShowEvent* aShowEvent);
 
   virtual void ActorDestroy(ActorDestroyReason) override
diff --git accessible/ipc/DocAccessibleParent.cpp accessible/ipc/DocAccessibleParent.cpp
index 4bbf261273c5..34c334847c04 100644
--- accessible/ipc/DocAccessibleParent.cpp
+++ accessible/ipc/DocAccessibleParent.cpp
@@ -79,6 +79,11 @@ DocAccessibleParent::RecvShowEvent(const ShowEventData& aData,
 
   MOZ_ASSERT(CheckDocTree());
 
+  // Just update, no events.
+  if (aData.EventSuppressed()) {
+    return IPC_OK();
+  }
+
   ProxyAccessible* target = parent->ChildAt(newChildIdx);
   ProxyShowHideEvent(target, parent, true, aFromUser);
 
diff --git accessible/ipc/other/PDocAccessible.ipdl accessible/ipc/other/PDocAccessible.ipdl
index 4c084bbee125..ffed961185fa 100644
--- accessible/ipc/other/PDocAccessible.ipdl
+++ accessible/ipc/other/PDocAccessible.ipdl
@@ -29,6 +29,7 @@ struct ShowEventData
   uint64_t ID;
   uint32_t Idx;
   AccessibleData[] NewTree;
+  bool EventSuppressed;
 };
 
 struct Attribute
diff --git accessible/ipc/win/DocAccessibleChild.h accessible/ipc/win/DocAccessibleChild.h
index e34987005a40..9b4586a16cda 100644
--- accessible/ipc/win/DocAccessibleChild.h
+++ accessible/ipc/win/DocAccessibleChild.h
@@ -110,7 +110,8 @@ private:
     SerializedShow(DocAccessibleChild* aTarget,
                    ShowEventData& aEventData, bool aFromUser)
       : DeferredEvent(aTarget)
-      , mEventData(aEventData.ID(), aEventData.Idx(), nsTArray<AccessibleData>())
+      , mEventData(aEventData.ID(), aEventData.Idx(),
+                   nsTArray<AccessibleData>(), aEventData.EventSuppressed())
       , mFromUser(aFromUser)
     {
       // Since IPDL doesn't generate a move constructor for ShowEventData,
diff --git accessible/ipc/win/PDocAccessible.ipdl accessible/ipc/win/PDocAccessible.ipdl
index afd3b991efdc..da7128e87a65 100644
--- accessible/ipc/win/PDocAccessible.ipdl
+++ accessible/ipc/win/PDocAccessible.ipdl
@@ -29,6 +29,7 @@ struct ShowEventData
   uint64_t ID;
   uint32_t Idx;
   AccessibleData[] NewTree;
+  bool EventSuppressed;
 };
 
 struct Attribute
diff --git accessible/tests/mochitest/treeupdate/test_ariaowns.html accessible/tests/mochitest/treeupdate/test_ariaowns.html
index 7d88b9a0698b..bf47bc84c280 100644
--- accessible/tests/mochitest/treeupdate/test_ariaowns.html
+++ accessible/tests/mochitest/treeupdate/test_ariaowns.html
@@ -580,9 +580,8 @@
     function test9_prepare()
     {
       this.eventSeq = [
-        new invokerChecker(EVENT_SHOW, () => {
-          let doc = getNode('t9_container').contentDocument;
-          return doc && doc.getElementById('container');
+        new invokerChecker(EVENT_DOCUMENT_LOAD_COMPLETE, () => {
+          return getNode('t9_container').contentDocument;
         })
       ];
 
