commit 97e7c363f664
Author: Andrea Marchesini <amarchesini@mozilla.com>
Date:   Tue Oct 17 13:17:51 2017 +0200

    Bug 1408397 - FileReader should not use a bufferStream together with an async inputStream. r=smaug, a=ritu
    
    --HG--
    extra : source : 61118e8a62afbc51169515f50c3b12b334219aa3
---
 dom/file/FileReader.cpp | 93 +++++++++++++++++++++++--------------------------
 dom/file/FileReader.h   |  1 -
 2 files changed, 44 insertions(+), 50 deletions(-)

diff --git dom/file/FileReader.cpp dom/file/FileReader.cpp
index 17d38f293519..ccd2a43986ef 100644
--- dom/file/FileReader.cpp
+++ dom/file/FileReader.cpp
@@ -19,6 +19,7 @@
 #include "mozilla/dom/FileReaderBinding.h"
 #include "mozilla/dom/ProgressEvent.h"
 #include "mozilla/Encoding.h"
+#include "nsAlgorithm.h"
 #include "nsCycleCollectionParticipant.h"
 #include "nsDOMJSUtils.h"
 #include "nsError.h"
@@ -187,27 +188,6 @@ FileReader::GetResult(JSContext* aCx,
   }
 }
 
-static nsresult
-ReadFuncBinaryString(nsIInputStream* in,
-                     void* closure,
-                     const char* fromRawSegment,
-                     uint32_t toOffset,
-                     uint32_t count,
-                     uint32_t *writeCount)
-{
-  char16_t* dest = static_cast<char16_t*>(closure) + toOffset;
-  char16_t* end = dest + count;
-  const unsigned char* source = (const unsigned char*)fromRawSegment;
-  while (dest != end) {
-    *dest = *source;
-    ++dest;
-    ++source;
-  }
-  *writeCount = count;
-
-  return NS_OK;
-}
-
 void
 FileReader::OnLoadEndArrayBuffer()
 {
@@ -290,32 +270,56 @@ FileReader::DoReadData(uint64_t aCount)
 
   if (mDataFormat == FILE_AS_BINARY) {
     //Continuously update our binary string as data comes in
-    uint32_t oldLen = mResult.Length();
-    MOZ_ASSERT(mResult.Length() == mDataLen, "unexpected mResult length");
-    if (uint64_t(oldLen) + aCount > UINT32_MAX)
+    CheckedInt<uint64_t> size = mResult.Length();
+    size += aCount;
+
+    if (!size.isValid() ||
+        size.value() > UINT32_MAX ||
+        size.value() > mTotal) {
       return NS_ERROR_OUT_OF_MEMORY;
-    char16_t *buf = nullptr;
-    mResult.GetMutableData(&buf, oldLen + aCount, fallible);
-    NS_ENSURE_TRUE(buf, NS_ERROR_OUT_OF_MEMORY);
+    }
 
-    nsresult rv;
+    uint32_t oldLen = mResult.Length();
+    MOZ_ASSERT(oldLen == mDataLen, "unexpected mResult length");
+
+    char16_t* dest = nullptr;
+    mResult.GetMutableData(&dest, size.value(), fallible);
+    NS_ENSURE_TRUE(dest, NS_ERROR_OUT_OF_MEMORY);
+
+    dest += oldLen;
+
+    while (aCount > 0) {
+      char tmpBuffer[4096];
+      uint32_t minCount =
+        XPCOM_MIN(aCount, static_cast<uint64_t>(sizeof(tmpBuffer)));
+      uint32_t read;
+
+      nsresult rv = mAsyncStream->Read(tmpBuffer, minCount, &read);
+      if (rv == NS_BASE_STREAM_CLOSED) {
+        rv = NS_OK;
+      }
 
-    // nsFileStreams do not implement ReadSegment. In case here we are dealing
-    // with a nsIAsyncInputStream, in content process, we need to wrap a
-    // nsIBufferedInputStream around it.
-    if (!mBufferedStream) {
-      rv = NS_NewBufferedInputStream(getter_AddRefs(mBufferedStream),
-                                     mAsyncStream, 8192);
       NS_ENSURE_SUCCESS(rv, rv);
-    }
 
-    rv = mBufferedStream->ReadSegments(ReadFuncBinaryString, buf + oldLen,
-                                       aCount, &bytesRead);
-    if (NS_WARN_IF(NS_FAILED(rv))) {
-      return rv;
+      if (read == 0) {
+        // The stream finished too early.
+        return NS_ERROR_OUT_OF_MEMORY;
+      }
+
+      char16_t* end = dest + read;
+      const unsigned char* source = (const unsigned char*)tmpBuffer;
+      while (dest != end) {
+        *dest = *source;
+        ++dest;
+        ++source;
+      }
+
+      aCount -= read;
+      bytesRead += read;
     }
 
-    mResult.Truncate(oldLen + bytesRead);
+    MOZ_ASSERT(size.value() == oldLen + bytesRead);
+    mResult.Truncate(size.value());
   }
   else {
     CheckedInt<uint64_t> size = mDataLen;
@@ -363,7 +367,6 @@ FileReader::ReadFileContent(Blob& aBlob,
   mResultArrayBuffer = nullptr;
 
   mAsyncStream = nullptr;
-  mBufferedStream = nullptr;
 
   mTransferred = 0;
   mTotal = 0;
@@ -557,7 +560,6 @@ FileReader::FreeDataAndDispatchSuccess()
   FreeFileData();
   mResult.SetIsVoid(false);
   mAsyncStream = nullptr;
-  mBufferedStream = nullptr;
   mBlob = nullptr;
 
   // Dispatch event to signify end of a successful operation
@@ -573,7 +575,6 @@ FileReader::FreeDataAndDispatchError()
   FreeFileData();
   mResult.SetIsVoid(true);
   mAsyncStream = nullptr;
-  mBufferedStream = nullptr;
   mBlob = nullptr;
 
   // Dispatch error event to signify load failure
@@ -768,7 +769,6 @@ FileReader::Abort()
   mResultArrayBuffer = nullptr;
 
   mAsyncStream = nullptr;
-  mBufferedStream = nullptr;
   mBlob = nullptr;
 
   //Clean up memory buffer
@@ -822,11 +822,6 @@ FileReader::Shutdown()
     mAsyncStream = nullptr;
   }
 
-  if (mBufferedStream) {
-    mBufferedStream->Close();
-    mBufferedStream = nullptr;
-  }
-
   FreeFileData();
   mResultArrayBuffer = nullptr;
 
diff --git dom/file/FileReader.h dom/file/FileReader.h
index 32ea1f9bc329..7aa52107dc46 100644
--- dom/file/FileReader.h
+++ dom/file/FileReader.h
@@ -183,7 +183,6 @@ private:
   bool mTimerIsActive;
 
   nsCOMPtr<nsIAsyncInputStream> mAsyncStream;
-  nsCOMPtr<nsIInputStream> mBufferedStream;
 
   RefPtr<DOMError> mError;
 
