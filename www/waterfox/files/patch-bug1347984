commit d40956eaa7d8
Author: Jan de Mooij <jdemooij@mozilla.com>
Date:   Fri Oct 6 20:11:07 2017 +0200

    Bug 1347984 - Check for dead object proxies in TriggerPromiseReactions. r=till, a=ritu
    
    --HG--
    extra : source : 754a3e12321c8656a83759adf297e61b0e188368
---
 js/src/builtin/Promise.cpp                  |  6 +++++-
 js/src/jit-test/tests/basic/bug908915.js    |  1 +
 js/src/jit-test/tests/promise/bug1347984.js |  6 ++++++
 js/src/shell/js.cpp                         | 21 +++++++++++++++++++++
 4 files changed, 33 insertions(+), 1 deletion(-)

diff --git js/src/builtin/Promise.cpp js/src/builtin/Promise.cpp
index 2462f1f07853..1cb1cff0682e 100644
--- js/src/builtin/Promise.cpp
+++ js/src/builtin/Promise.cpp
@@ -1017,8 +1017,12 @@ TriggerPromiseReactions(JSContext* cx, HandleValue reactionsVal, JS::PromiseStat
     RootedObject reactions(cx, &reactionsVal.toObject());
     RootedObject reaction(cx);
 
-    if (reactions->is<PromiseReactionRecord>() || IsWrapper(reactions))
+    if (reactions->is<PromiseReactionRecord>() ||
+        IsWrapper(reactions) ||
+        JS_IsDeadWrapper(reactions))
+    {
         return EnqueuePromiseReactionJob(cx, reactions, valueOrReason, state);
+    }
 
     RootedNativeObject reactionsList(cx, &reactions->as<NativeObject>());
     size_t reactionsCount = reactionsList->getDenseInitializedLength();
diff --git js/src/jit-test/tests/basic/bug908915.js js/src/jit-test/tests/basic/bug908915.js
index 5077801b1b67..f0213296e769 100644
--- js/src/jit-test/tests/basic/bug908915.js
+++ js/src/jit-test/tests/basic/bug908915.js
@@ -11,6 +11,7 @@ var blacklist = {
     'readline': true,
     'terminate': true,
     'nestedShell': true,
+    'nukeAllCCWs': true,
 };
 
 function f(y) {}
diff --git js/src/jit-test/tests/promise/bug1347984.js js/src/jit-test/tests/promise/bug1347984.js
new file mode 100644
index 000000000000..5fc458cd452e
--- /dev/null
+++ js/src/jit-test/tests/promise/bug1347984.js
@@ -0,0 +1,6 @@
+// |jit-test| error:dead object
+var g = newGlobal();
+var p = new Promise(() => {});
+g.Promise.prototype.then.call(p, () => void 0);
+g.eval("nukeAllCCWs()");
+resolvePromise(p, 9);
diff --git js/src/shell/js.cpp js/src/shell/js.cpp
index 2bb7e97120a7..8e9aee7c854a 100644
--- js/src/shell/js.cpp
+++ js/src/shell/js.cpp
@@ -5049,6 +5049,23 @@ NukeCCW(JSContext* cx, unsigned argc, Value* vp)
     return true;
 }
 
+static bool
+NukeAllCCWs(JSContext* cx, unsigned argc, Value* vp)
+{
+    CallArgs args = CallArgsFromVp(argc, vp);
+
+    if (args.length() != 0) {
+        JS_ReportErrorNumberASCII(cx, my_GetErrorMessage, nullptr, JSSMSG_INVALID_ARGS,
+                                  "nukeAllCCWs");
+        return false;
+    }
+
+    NukeCrossCompartmentWrappers(cx, AllCompartments(), cx->compartment(),
+                                 NukeWindowReferences, NukeAllReferences);
+    args.rval().setUndefined();
+    return true;
+}
+
 static bool
 GetMaxArgs(JSContext* cx, unsigned argc, Value* vp)
 {
@@ -6552,6 +6569,10 @@ static const JSFunctionSpecWithHelp shell_functions[] = {
 "nukeCCW(wrapper)",
 "  Nuke a CrossCompartmentWrapper, which turns it into a DeadProxyObject."),
 
+    JS_FN_HELP("nukeAllCCWs", NukeAllCCWs, 0, 0,
+"nukeAllCCWs()",
+"  Like nukeCCW, but for all CrossCompartmentWrappers targeting the current compartment."),
+
     JS_FN_HELP("createMappedArrayBuffer", CreateMappedArrayBuffer, 1, 0,
 "createMappedArrayBuffer(filename, [offset, [size]])",
 "  Create an array buffer that mmaps the given file."),
