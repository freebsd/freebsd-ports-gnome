commit fb06fdcf7d66
Author: Tooru Fujisawa <arai_a@mac.com>
Date:   Sun Mar 25 17:23:48 2018 +0900

    Bug 1402380 - Set text/x-moz-url flavor of data transfer for places container with URLs inside it. r=enndeakin, a=jcristau
    
    --HG--
    extra : source : e4cc022b417a1268fa063fe054aa79f3c141c2e2
---
 .../components/places/tests/browser/browser.ini    |  1 +
 .../tests/browser/browser_drag_folder_on_newTab.js | 94 ++++++++++++++++++++++
 testing/mochitest/tests/SimpleTest/EventUtils.js   | 86 ++++++++++++++++++++
 toolkit/components/places/PlacesUtils.jsm          | 11 ++-
 4 files changed, 191 insertions(+), 1 deletion(-)

diff --git browser/components/places/tests/browser/browser.ini browser/components/places/tests/browser/browser.ini
index 64b7782c5f83..33c4cf5cc416 100644
--- browser/components/places/tests/browser/browser.ini
+++ browser/components/places/tests/browser/browser.ini
@@ -63,3 +63,4 @@ support-files =
 support-files =
   bookmark_dummy_1.html
   bookmark_dummy_2.html
+[browser_drag_folder_on_newTab.js]
diff --git browser/components/places/tests/browser/browser_drag_folder_on_newTab.js browser/components/places/tests/browser/browser_drag_folder_on_newTab.js
new file mode 100644
index 000000000000..00646fff18b4
--- /dev/null
+++ browser/components/places/tests/browser/browser_drag_folder_on_newTab.js
@@ -0,0 +1,94 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+add_task(async function setup() {
+  let toolbar = document.getElementById("PersonalToolbar");
+  let wasCollapsed = toolbar.collapsed;
+
+  // Uncollapse the personal toolbar if needed.
+  if (wasCollapsed) {
+    await promiseSetToolbarVisibility(toolbar, true);
+  }
+
+  // Clean before and after so we don't have anything in the folders.
+  await PlacesUtils.bookmarks.eraseEverything();
+
+  registerCleanupFunction(async function() {
+    // Collapse the personal toolbar if needed.
+    if (wasCollapsed) {
+      await promiseSetToolbarVisibility(toolbar, false);
+    }
+
+    await PlacesUtils.bookmarks.eraseEverything();
+  });
+});
+
+const TEST_FOLDER_NAME = "Test folder";
+
+add_task(async function test_change_location_from_Toolbar() {
+  let newTabButton = document.getElementById("new-tab-button");
+
+  let children = [
+    {
+      title: "first",
+      url: "http://www.mochi.test/first"
+    },
+    {
+      title: "second",
+      url: "http://www.mochi.test/second"
+    },
+    {
+      type: PlacesUtils.bookmarks.TYPE_SEPARATOR,
+    },
+    {
+      title: "third",
+      url: "http://www.mochi.test/third"
+    },
+  ];
+  let guid = PlacesUtils.history.makeGuid();
+  await PlacesUtils.bookmarks.insertTree({
+    guid: PlacesUtils.bookmarks.toolbarGuid,
+    children: [
+      {
+        guid,
+        type: PlacesUtils.bookmarks.TYPE_FOLDER,
+        title: TEST_FOLDER_NAME,
+        children,
+      },
+    ],
+  });
+
+  let folder = getToolbarNodeForItemGuid(guid);
+
+  let loadedPromises = children.filter(item => "url" in item).map(
+    item => BrowserTestUtils.waitForNewTab(gBrowser, item.url, false, true));
+
+  let srcX = 10, srcY = 10;
+  // We should drag upwards, since dragging downwards opens menu instead.
+  let stepX = 0, stepY = -5;
+
+  // We need to dispatch mousemove before dragging, to populate
+  // PlacesToolbar._cachedMouseMoveEvent, with the cursor position after the
+  // first step, so that the places code detects it as dragging upward.
+  EventUtils.synthesizeMouse(folder, srcX + stepX, srcY + stepY,
+                             { type: "mousemove" });
+
+  await EventUtils.synthesizePlainDragAndDrop({
+    srcElement: folder,
+    destElement: newTabButton,
+    srcX,
+    srcY,
+    stepX,
+    stepY,
+  });
+
+  let tabs = await Promise.all(loadedPromises);
+
+  for (let tab of tabs) {
+    BrowserTestUtils.removeTab(tab);
+  }
+
+  ok(true);
+});
diff --git testing/mochitest/tests/SimpleTest/EventUtils.js testing/mochitest/tests/SimpleTest/EventUtils.js
index cad43966d91d..907cf60dc254 100644
--- testing/mochitest/tests/SimpleTest/EventUtils.js
+++ testing/mochitest/tests/SimpleTest/EventUtils.js
@@ -17,6 +17,7 @@
  *  synthesizeMouseExpectEvent
  *  synthesizeKeyExpectEvent
  *  synthesizeNativeOSXClick
+ *  synthesizePlainDragAndDrop
  *
  *  When adding methods to this file, please add a performance test for it.
  */
@@ -2161,6 +2162,91 @@ function synthesizeDrop(aSrcElement, aDestElement, aDragData, aDropEffect, aWind
   }
 }
 
+/**
+ * Emulate a drag and drop by emulating a dragstart by mousedown and mousemove,
+ * and firing events dragenter, dragover, drop, and mouseup.
+ * This does not modify dataTransfer and tries to emulate the plain drag and
+ * drop as much as possible, compared to synthesizeDrop.
+ *
+ * @param aParams
+ *        {
+ *          srcElement:   The element to start dragging
+ *          destElement:  The element to drop on
+ *          srcX:         The initial x coordinate inside srcElement
+ *          srcY:         The initial y coordinate inside srcElement
+ *          stepX:        The x-axis step for mousemove inside srcElement
+ *          stepY:        The y-axis step for mousemove inside srcElement
+ *          destX:        The x coordinate inside destElement
+ *          destY:        The x coordinate inside destElement
+ *          srcWindow:    The window for dispatching event on srcElement,
+ *                        defaults to the current window object
+ *          destWindow:   The window for dispatching event on destElement,
+ *                        defaults to the current window object
+ *        }
+ */
+async function synthesizePlainDragAndDrop(aParams)
+{
+  let {
+    srcElement,
+    destElement,
+    srcX = 2,
+    srcY = 2,
+    stepX = 9,
+    stepY = 9,
+    destX = 2,
+    destY = 2,
+    srcWindow = window,
+    destWindow = window,
+  } = aParams;
+
+  const ds = _EU_Cc["@mozilla.org/widget/dragservice;1"]
+        .getService(_EU_Ci.nsIDragService);
+  ds.startDragSession();
+
+  try {
+    let dataTransfer = null;
+    function trapDrag(aEvent) {
+      dataTransfer = aEvent.dataTransfer;
+    }
+    srcElement.addEventListener("dragstart", trapDrag, true);
+    synthesizeMouse(srcElement, srcX, srcY, { type: "mousedown" }, srcWindow);
+
+    // Wait for the next event tick after each event dispatch, so that UI elements
+    // (e.g. menu) work like the real user input.
+    await new Promise(r => setTimeout(r, 0));
+
+    srcX += stepX; srcY += stepY;
+    synthesizeMouse(srcElement, srcX, srcY, { type: "mousemove" }, srcWindow);
+
+    await new Promise(r => setTimeout(r, 0));
+
+    srcX += stepX; srcY += stepY;
+    synthesizeMouse(srcElement, srcX, srcY, { type: "mousemove" }, srcWindow);
+
+    await new Promise(r => setTimeout(r, 0));
+
+    srcElement.removeEventListener("dragstart", trapDrag, true);
+
+    await new Promise(r => setTimeout(r, 0));
+
+    let event = createDragEventObject("dragover", destElement, destWindow,
+                                      dataTransfer, {});
+    sendDragEvent(event, destElement, destWindow);
+
+    await new Promise(r => setTimeout(r, 0));
+
+    event = createDragEventObject("drop", destElement, destWindow,
+                                  dataTransfer, {});
+    sendDragEvent(event, destElement, destWindow);
+
+    await new Promise(r => setTimeout(r, 0));
+
+    synthesizeMouseAtCenter(destElement, { type: "mouseup" }, destWindow);
+  } finally {
+    ds.endDragSession(true, 0);
+  }
+}
+
 var PluginUtils =
 {
   withTestPlugin : function(callback)
diff --git toolkit/components/places/PlacesUtils.jsm toolkit/components/places/PlacesUtils.jsm
index f6315f68eb4c..5aebe0496ee8 100644
--- toolkit/components/places/PlacesUtils.jsm
+++ toolkit/components/places/PlacesUtils.jsm
@@ -896,6 +896,11 @@ this.PlacesUtils = {
       case this.TYPE_X_MOZ_URL: {
         if (aFeedURI || PlacesUtils.nodeIsURI(aNode))
           return (aFeedURI || aNode.uri) + NEWLINE + aNode.title;
+        if (PlacesUtils.nodeIsContainer(aNode)) {
+          return PlacesUtils.getURLsForContainerNode(aNode)
+            .map(item => item.uri + "\n" + item.title)
+            .join("\n");
+        }
         return "";
       }
       case this.TYPE_HTML: {
@@ -1491,7 +1496,11 @@ this.PlacesUtils = {
     for (let i = 0; i < root.childCount; ++i) {
       let child = root.getChild(i);
       if (this.nodeIsURI(child))
-        urls.push({uri: child.uri, isBookmark: this.nodeIsBookmark(child)});
+        urls.push({
+          uri: child.uri,
+          isBookmark: this.nodeIsBookmark(child),
+          title: child.title,
+        });
     }
 
     if (!wasOpen) {
