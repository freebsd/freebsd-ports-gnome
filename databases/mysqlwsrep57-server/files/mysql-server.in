#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: mysql
# REQUIRE: LOGIN
# KEYWORD: shutdown

#
# Add the following line to /etc/rc.conf to enable mysql:
# mysql_enable (bool):	Set to "NO" by default.
#			Set it to "YES" to enable MySQL.
%%LEGACY_LIMITS%%# mysql_limits (bool):	Set to "NO" by default.
%%LEGACY_LIMITS%%#			Set it to yes to run `limits -e -U mysql`
%%LEGACY_LIMITS%%#			just before mysql starts.
# mysql_dbdir (str):	Default to "%%MY_DBDIR%%"
#			Base database directory.
# mysql_confdir (str):	Default to "%%ETCDIR%%"
#			Base configuration directory.
# mysql_optfile (str):	Server-specific option file.
#			Set it in the rc.conf or default behaviour of
#			`mysqld_safe` itself, will be picking
#			${mysql_confdir}/my.cnf if it exists.
# mysql_pidfile (str):	Custum PID file path and name.
#			Default to "${mysql_dbdir}/${hostname}.pid".
# mysql_args (str):	Custom additional arguments to be passed
#			to mysqld_safe (default empty).
#

. /etc/rc.subr

name="mysql"
rcvar=mysql_enable

load_rc_config $name

: ${mysql_enable="NO"}
%%LEGACY_LIMITS%%: ${mysql_limits="NO"}
: ${mysql_dbdir="%%MY_DBDIR%%"}
: ${mysql_confdir="%%ETCDIR%%"}
if [ -f "${mysql_confdir}/my.cnf" ]; then
: ${mysql_optfile="${mysql_confdir}/my.cnf"}
elif [ -f "${mysql_dbdir}/my.cnf" ]; then
: ${mysql_optfile="${mysql_dbdir}/my.cnf"}
fi
if [ ! -z "${mysql_optfile}" ]; then
mysql_extra="--defaults-extra-file=${mysql_optfile}"
fi

mysql_user="mysql"
%%LEGACY_LIMITS%%mysql_limits_args="-e -U ${mysql_user}"
: ${hostname:=`/bin/hostname`}
pidfile=${mysql_pidfile:-"${mysql_dbdir}/${hostname}.pid"}
command="/usr/sbin/daemon"
command_args="-c -f %%PREFIX%%/bin/mysqld_safe ${mysql_extra} --basedir=%%PREFIX%% --datadir=${mysql_dbdir} --pid-file=${pidfile} --user=${mysql_user} ${mysql_args} %%FEDER%% %%PERFSCHEMRC%%"
procname="%%PREFIX%%/libexec/mysqld"
start_precmd="${name}_prestart"
start_postcmd="${name}_poststart"
mysql_install_db="${procname}"
mysql_install_db_args="${mysql_extra} --basedir=%%PREFIX%% --datadir=${mysql_dbdir} --user=${mysql_user} --initialize"
service_startup_timeout=900
startup_sleep=1
sst_progress_file=${mysql_dbdir}/sst_in_progress
extra_commands="bootstrap"
bootstrap_cmd="mysql_bootstrap"

mysql_bootstrap()
{
	# Bootstrap the cluster: start the first node that initiates the cluster
	check_startmsgs && echo "Bootstrapping cluster"
	shift
	command_args="${command_args} --wsrep-new-cluster"
	run_rc_command ${_rc_prefix}start
}

mysql_create_auth_tables()
{
	eval $mysql_install_db $mysql_install_db_args >/dev/null 2>/dev/null
}

mysql_prestart()
{
	if [ ! -d "${mysql_dbdir}/mysql/." ]; then
		mysql_create_auth_tables || return 1
	fi
%%LEGACY_LIMITS%%	if checkyesno mysql_limits; then
%%LEGACY_LIMITS%%		eval `/usr/bin/limits ${mysql_limits_args}` 2>/dev/null
%%LEGACY_LIMITS%%	else
%%LEGACY_LIMITS%%		return 0
%%LEGACY_LIMITS%%	fi
%%MODERN_LIMITS%%	return 0
}

mysql_poststart()
{
	local timeout=${service_startup_timeout}
	while [ ! -f "${pidfile}" -a ${timeout} -gt 0 ]; do
		if test -e $sst_progress_file && [ $startup_sleep -ne 100 ]; then
			check_startmsgs && echo "SST in progress, setting sleep higher"
			startup_sleep=100
		fi
		timeout=$(( timeout - 1 ))
		sleep $startup_sleep
	done
	return 0
}

run_rc_command "$1"
