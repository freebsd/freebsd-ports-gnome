--- cmake/scripts/freebsd/ArchSetup.cmake.orig	2017-12-17 12:10:14 UTC
+++ cmake/scripts/freebsd/ArchSetup.cmake
@@ -1,4 +1,7 @@
 set(ARCH_DEFINES -D_LINUX -DTARGET_POSIX -DTARGET_FREEBSD)
+if(CORE_PLATFORM_NAME_LC STREQUAL rbpi)
+  list(APPEND ARCH_DEFINES -D_ARMEL -DTARGET_RASPBERRY_PI)
+endif()
 set(SYSTEM_DEFINES -D__STDC_CONSTANT_MACROS -D_LARGEFILE64_SOURCE
                    -D_FILE_OFFSET_BITS=64)
 set(PLATFORM_DIR platform/linux)
@@ -10,6 +13,15 @@ else()
     set(ARCH x86_64-freebsd)
   elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "i.86")
     set(ARCH x86-freebsd)
+  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL armv6)
+    set(ARCH armv6-freebsd)
+    set(NEON True)
+  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL armv7)
+    set(ARCH armv7-freebsd)
+    set(NEON True)
+  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL aarch64)
+    set(ARCH aarch64-freebsd)
+    set(NEON True)
   else()
     message(WARNING "unknown CPU: ${CPU}")
   endif()
--- cmake/treedata/freebsd/subdirs.txt.orig	2018-01-05 00:21:32 UTC
+++ cmake/treedata/freebsd/subdirs.txt
@@ -9,4 +9,6 @@ xbmc/storage/linux         storage/linux
 xbmc/filesystem/posix      filesystem/posix
 xbmc/utils/posix           utils_posix
 xbmc/platform/posix        posix
+xbmc/cores/RetroPlayer/process/rbpi cores/RetroPlayer/process/rbpi
+xbmc/cores/VideoPlayer/Process/rbpi cores/VideoPlayer/Process/rbpi
 xbmc/freebsd               freebsdsupport
--- xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.h.orig	2018-01-04 22:35:33 UTC
+++ xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/MMALRenderer.h
@@ -31,6 +31,7 @@
 #include "cores/VideoSettings.h"
 #include "cores/VideoPlayer/DVDStreamInfo.h"
 #include "guilib/Geometry.h"
+#include "platform/linux/RBP.h"
 #include "threads/Thread.h"
 
 // worst case number of buffers. 12 for decoder. 8 for multi-threading in ffmpeg. NUM_BUFFERS for renderer.
--- xbmc/windowing/rpi/WinSystemRpi.cpp.orig	2018-01-05 07:10:41 UTC
+++ xbmc/windowing/rpi/WinSystemRpi.cpp
@@ -32,9 +32,16 @@
 #include "settings/DisplaySettings.h"
 #include "guilib/DispResource.h"
 #include "utils/log.h"
+#include "utils/StringUtils.h"
 #include "../WinEventsLinux.h"
 #include "cores/AudioEngine/AESinkFactory.h"
 #include "cores/AudioEngine/Sinks/AESinkPi.h"
+#ifdef HAS_PULSEAUDIO
+#include "cores/AudioEngine/Sinks/AESinkPULSE.h"
+#endif
+#ifdef HAS_SNDIO
+#include "cores/AudioEngine/Sinks/AESinkSNDIO.h"
+#endif
 
 #include <EGL/egl.h>
 #include <EGL/eglplatform.h>
@@ -54,7 +61,36 @@ CWinSystemRpi::CWinSystemRpi()
 
   m_winEvents.reset(new CWinEventsLinux());
   AE::CAESinkFactory::ClearSinks();
-  CAESinkPi::Register();
+
+  std::string envSink;
+  if (getenv("AE_SINK"))
+    envSink = getenv("AE_SINK");
+  if (StringUtils::EqualsNoCase(envSink, "PULSE"))
+  {
+#ifdef HAS_PULSEAUDIO
+    CAESinkPulseaudio::Register();
+#endif
+  }
+  else if (StringUtils::EqualsNoCase(envSink, "SNDIO"))
+  {
+#ifdef HAS_SNDIO
+    CAESinkSNDIO::Register();
+#endif
+  }
+  else if (StringUtils::EqualsNoCase(envSink, "PI"))
+  {
+    CAESinkPi::Register();
+  }
+  else
+  {
+#if defined(HAS_PULSEAUDIO)
+     CAESinkPulseaudio::Register();
+#elif defined(HAS_SNDIO)
+     CAESinkSNDIO::Register();
+#else
+     CAESinkPi::Register();
+#endif
+  }
 }
 
 CWinSystemRpi::~CWinSystemRpi()
