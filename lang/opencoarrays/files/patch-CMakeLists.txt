--- CMakeLists.txt.orig	2017-02-07 05:19:01 UTC
+++ CMakeLists.txt
@@ -164,48 +164,6 @@ if ( (NOT MPI_C_FOUND) OR (NOT MPI_Fortr
   find_package( MPI REQUIRED )
 endif()
 
-#--------------------------------------------------------
-# Make sure a simple "hello world" C mpi program compiles
-#--------------------------------------------------------
-set(OLD_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
-set(CMAKE_REQUIRED_FLAGS ${MPI_C_COMPILE_FLAGS} ${MPI_C_LINK_FLAGS})
-set(OLD_INCLUDES ${CMAKE_REQUIRED_INCLUDES})
-set(CMAKE_REQUIRED_INCLUDES ${MPI_C_INCLUDE_PATH})
-set(OLD_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
-set(CMAKE_REQUIRED_LIBRARIES ${MPI_C_LIBRARIES})
-include (CheckCSourceCompiles)
-CHECK_C_SOURCE_COMPILES("
-#include <mpi.h>
-#include <stdio.h>
-int main(int argc, char** argv) {
-  MPI_Init(NULL, NULL);
-  int world_size;
-  MPI_Comm_size(MPI_COMM_WORLD, &world_size);
-  int world_rank;
-  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
-  char processor_name[MPI_MAX_PROCESSOR_NAME];
-  int name_len;
-  MPI_Get_processor_name(processor_name, &name_len);
-  printf('Hello world from processor %s, rank %d out of %d processors',
-         processor_name, world_rank, world_size);
-  MPI_Finalize();
-}"
-MPI_C_COMPILES)
-set(CMAKE_REQUIRED_FLAGS ${OLD_REQUIRED_FLAGS})
-set(CMAKE_REQUIRED_INCLUDES ${OLD_INCLUDES})
-set(CMAKE_REQUIRED_LIBRARIES ${OLD_LIBRARIES})
-unset(OLD_REQUIRED_FLAGS)
-unset(OLD_INCLUDES)
-unset(OLD_LIBRARIES)
-
-if (NOT MPI_C_COMPILES)
-  message(FATAL_ERROR "MPI_C is missing! "
-    "Try setting MPI_C_COMPILER to the appropriate C compiler wrapper script and reconfigure. "
-    "i.e., `cmake -DMPI_C_COMPILER=/path/to/mpicc ..` or set it by editing the cache using "
-    "cmake-gui or ccmake."
-    )
-endif()
-
 #--------------------------------------------------------------
 # Make sure a simple "hello world" Fortran mpi program compiles
 # Try using mpi.mod first then fall back on includ 'mpif.h'
